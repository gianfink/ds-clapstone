{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<h1 align=center><font size = 5>Capstone Project: Segmenting and Clustering Neighborhoods in Toronto</font></h1> "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Import libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Documentation for reviewer: In this first step I am installing all the required libaries for this project. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: beautifulsoup4 in /home/jupyterlab/conda/envs/python/lib/python3.6/site-packages (4.9.0)\n",
      "Requirement already satisfied: soupsieve>1.2 in /home/jupyterlab/conda/envs/python/lib/python3.6/site-packages (from beautifulsoup4) (2.0)\n",
      "Requirement already satisfied: lxml in /home/jupyterlab/conda/envs/python/lib/python3.6/site-packages (4.5.0)\n",
      "Collecting package metadata (current_repodata.json): done\n",
      "Solving environment: done\n",
      "\n",
      "# All requested packages already installed.\n",
      "\n",
      "Folium imported.\n",
      "Libraries imported.\n"
     ]
    }
   ],
   "source": [
    "!pip install beautifulsoup4\n",
    "!pip install lxml\n",
    "import requests # library to handle requests\n",
    "import pandas as pd # library for data analsysis\n",
    "import numpy as np # library to handle data in a vectorized manner\n",
    "import random # library for random number generation\n",
    "\n",
    "#!conda install -c conda-forge geopy --yes \n",
    "from geopy.geocoders import Nominatim # module to convert an address into latitude and longitude values\n",
    "\n",
    "# libraries for displaying images\n",
    "from IPython.display import Image \n",
    "from IPython.core.display import HTML \n",
    "\n",
    "from IPython.display import display_html\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "    \n",
    "# tranforming json file into a pandas dataframe library\n",
    "from pandas.io.json import json_normalize\n",
    "\n",
    "!conda install -c conda-forge folium=0.5.0 --yes\n",
    "import folium # plotting library\n",
    "from bs4 import BeautifulSoup\n",
    "from sklearn.cluster import KMeans\n",
    "import matplotlib.cm as cm\n",
    "import matplotlib.colors as colors\n",
    "\n",
    "print('Folium imported.')\n",
    "print('Libraries imported.')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Initialize the Wikipedia neighborhood data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Documentation for reviewer: In this step I am retrieving the Wikipedia data as an HTML table. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<title>List of postal codes of Canada: M - Wikipedia</title>\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"wikitable\">\n",
       "<tbody><tr>\n",
       "<th>Postal code\n",
       "</th>\n",
       "<th>Borough\n",
       "</th>\n",
       "<th>Neighborhood\n",
       "</th></tr>\n",
       "<tr>\n",
       "<td>M1A\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M2A\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M3A\n",
       "</td>\n",
       "<td>North York\n",
       "</td>\n",
       "<td>Parkwoods\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M4A\n",
       "</td>\n",
       "<td>North York\n",
       "</td>\n",
       "<td>Victoria Village\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M5A\n",
       "</td>\n",
       "<td>Downtown Toronto\n",
       "</td>\n",
       "<td>Regent Park / Harbourfront\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M6A\n",
       "</td>\n",
       "<td>North York\n",
       "</td>\n",
       "<td>Lawrence Manor / Lawrence Heights\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M7A\n",
       "</td>\n",
       "<td>Downtown Toronto\n",
       "</td>\n",
       "<td>Queen's Park / Ontario Provincial Government\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M8A\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M9A\n",
       "</td>\n",
       "<td>Etobicoke\n",
       "</td>\n",
       "<td>Islington Avenue\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M1B\n",
       "</td>\n",
       "<td>Scarborough\n",
       "</td>\n",
       "<td>Malvern / Rouge\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M2B\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M3B\n",
       "</td>\n",
       "<td>North York\n",
       "</td>\n",
       "<td>Don Mills\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M4B\n",
       "</td>\n",
       "<td>East York\n",
       "</td>\n",
       "<td>Parkview Hill / Woodbine Gardens\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M5B\n",
       "</td>\n",
       "<td>Downtown Toronto\n",
       "</td>\n",
       "<td>Garden District, Ryerson\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M6B\n",
       "</td>\n",
       "<td>North York\n",
       "</td>\n",
       "<td>Glencairn\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M7B\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M8B\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M9B\n",
       "</td>\n",
       "<td>Etobicoke\n",
       "</td>\n",
       "<td>West Deane Park / Princess Gardens / Martin Grove / Islington / Cloverdale\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M1C\n",
       "</td>\n",
       "<td>Scarborough\n",
       "</td>\n",
       "<td>Rouge Hill / Port Union / Highland Creek\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M2C\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M3C\n",
       "</td>\n",
       "<td>North York\n",
       "</td>\n",
       "<td>Don Mills\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M4C\n",
       "</td>\n",
       "<td>East York\n",
       "</td>\n",
       "<td>Woodbine Heights\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M5C\n",
       "</td>\n",
       "<td>Downtown Toronto\n",
       "</td>\n",
       "<td>St. James Town\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M6C\n",
       "</td>\n",
       "<td>York\n",
       "</td>\n",
       "<td>Humewood-Cedarvale\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M7C\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M8C\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M9C\n",
       "</td>\n",
       "<td>Etobicoke\n",
       "</td>\n",
       "<td>Eringate / Bloordale Gardens / Old Burnhamthorpe / Markland Wood\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M1E\n",
       "</td>\n",
       "<td>Scarborough\n",
       "</td>\n",
       "<td>Guildwood / Morningside / West Hill\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M2E\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M3E\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M4E\n",
       "</td>\n",
       "<td>East Toronto\n",
       "</td>\n",
       "<td>The Beaches\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M5E\n",
       "</td>\n",
       "<td>Downtown Toronto\n",
       "</td>\n",
       "<td>Berczy Park\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M6E\n",
       "</td>\n",
       "<td>York\n",
       "</td>\n",
       "<td>Caledonia-Fairbanks\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M7E\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M8E\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M9E\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M1G\n",
       "</td>\n",
       "<td>Scarborough\n",
       "</td>\n",
       "<td>Woburn\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M2G\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M3G\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M4G\n",
       "</td>\n",
       "<td>East York\n",
       "</td>\n",
       "<td>Leaside\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M5G\n",
       "</td>\n",
       "<td>Downtown Toronto\n",
       "</td>\n",
       "<td>Central Bay Street\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M6G\n",
       "</td>\n",
       "<td>Downtown Toronto\n",
       "</td>\n",
       "<td>Christie\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M7G\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M8G\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M9G\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M1H\n",
       "</td>\n",
       "<td>Scarborough\n",
       "</td>\n",
       "<td>Cedarbrae\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M2H\n",
       "</td>\n",
       "<td>North York\n",
       "</td>\n",
       "<td>Hillcrest Village\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M3H\n",
       "</td>\n",
       "<td>North York\n",
       "</td>\n",
       "<td>Bathurst Manor / Wilson Heights / Downsview North\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M4H\n",
       "</td>\n",
       "<td>East York\n",
       "</td>\n",
       "<td>Thorncliffe Park\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M5H\n",
       "</td>\n",
       "<td>Downtown Toronto\n",
       "</td>\n",
       "<td>Richmond / Adelaide / King\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M6H\n",
       "</td>\n",
       "<td>West Toronto\n",
       "</td>\n",
       "<td>Dufferin / Dovercourt Village\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M7H\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M8H\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M9H\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M1J\n",
       "</td>\n",
       "<td>Scarborough\n",
       "</td>\n",
       "<td>Scarborough Village\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M2J\n",
       "</td>\n",
       "<td>North York\n",
       "</td>\n",
       "<td>Fairview / Henry Farm / Oriole\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M3J\n",
       "</td>\n",
       "<td>North York\n",
       "</td>\n",
       "<td>Northwood Park / York University\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M4J\n",
       "</td>\n",
       "<td>East York\n",
       "</td>\n",
       "<td>East Toronto\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M5J\n",
       "</td>\n",
       "<td>Downtown Toronto\n",
       "</td>\n",
       "<td>Harbourfront East / Union Station / Toronto Islands\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M6J\n",
       "</td>\n",
       "<td>West Toronto\n",
       "</td>\n",
       "<td>Little Portugal / Trinity\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M7J\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M8J\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M9J\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M1K\n",
       "</td>\n",
       "<td>Scarborough\n",
       "</td>\n",
       "<td>Kennedy Park / Ionview / East Birchmount Park\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M2K\n",
       "</td>\n",
       "<td>North York\n",
       "</td>\n",
       "<td>Bayview Village\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M3K\n",
       "</td>\n",
       "<td>North York\n",
       "</td>\n",
       "<td>Downsview\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M4K\n",
       "</td>\n",
       "<td>East Toronto\n",
       "</td>\n",
       "<td>The Danforth West / Riverdale\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M5K\n",
       "</td>\n",
       "<td>Downtown Toronto\n",
       "</td>\n",
       "<td>Toronto Dominion Centre / Design Exchange\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M6K\n",
       "</td>\n",
       "<td>West Toronto\n",
       "</td>\n",
       "<td>Brockton / Parkdale Village / Exhibition Place\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M7K\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M8K\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M9K\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M1L\n",
       "</td>\n",
       "<td>Scarborough\n",
       "</td>\n",
       "<td>Golden Mile / Clairlea / Oakridge\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M2L\n",
       "</td>\n",
       "<td>North York\n",
       "</td>\n",
       "<td>York Mills / Silver Hills\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M3L\n",
       "</td>\n",
       "<td>North York\n",
       "</td>\n",
       "<td>Downsview\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M4L\n",
       "</td>\n",
       "<td>East Toronto\n",
       "</td>\n",
       "<td>India Bazaar / The Beaches West\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M5L\n",
       "</td>\n",
       "<td>Downtown Toronto\n",
       "</td>\n",
       "<td>Commerce Court / Victoria Hotel\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M6L\n",
       "</td>\n",
       "<td>North York\n",
       "</td>\n",
       "<td>North Park / Maple Leaf Park / Upwood Park\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M7L\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M8L\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M9L\n",
       "</td>\n",
       "<td>North York\n",
       "</td>\n",
       "<td>Humber Summit\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M1M\n",
       "</td>\n",
       "<td>Scarborough\n",
       "</td>\n",
       "<td>Cliffside / Cliffcrest / Scarborough Village West\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M2M\n",
       "</td>\n",
       "<td>North York\n",
       "</td>\n",
       "<td>Willowdale / Newtonbrook\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M3M\n",
       "</td>\n",
       "<td>North York\n",
       "</td>\n",
       "<td>Downsview\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M4M\n",
       "</td>\n",
       "<td>East Toronto\n",
       "</td>\n",
       "<td>Studio District\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M5M\n",
       "</td>\n",
       "<td>North York\n",
       "</td>\n",
       "<td>Bedford Park / Lawrence Manor East\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M6M\n",
       "</td>\n",
       "<td>York\n",
       "</td>\n",
       "<td>Del Ray / Mount Dennis / Keelsdale and Silverthorn\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M7M\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M8M\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M9M\n",
       "</td>\n",
       "<td>North York\n",
       "</td>\n",
       "<td>Humberlea / Emery\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M1N\n",
       "</td>\n",
       "<td>Scarborough\n",
       "</td>\n",
       "<td>Birch Cliff / Cliffside West\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M2N\n",
       "</td>\n",
       "<td>North York\n",
       "</td>\n",
       "<td>Willowdale\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M3N\n",
       "</td>\n",
       "<td>North York\n",
       "</td>\n",
       "<td>Downsview\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M4N\n",
       "</td>\n",
       "<td>Central Toronto\n",
       "</td>\n",
       "<td>Lawrence Park\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M5N\n",
       "</td>\n",
       "<td>Central Toronto\n",
       "</td>\n",
       "<td>Roselawn\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M6N\n",
       "</td>\n",
       "<td>York\n",
       "</td>\n",
       "<td>Runnymede / The Junction North\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M7N\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M8N\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M9N\n",
       "</td>\n",
       "<td>York\n",
       "</td>\n",
       "<td>Weston\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M1P\n",
       "</td>\n",
       "<td>Scarborough\n",
       "</td>\n",
       "<td>Dorset Park / Wexford Heights / Scarborough Town Centre\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M2P\n",
       "</td>\n",
       "<td>North York\n",
       "</td>\n",
       "<td>York Mills West\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M3P\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M4P\n",
       "</td>\n",
       "<td>Central Toronto\n",
       "</td>\n",
       "<td>Davisville North\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M5P\n",
       "</td>\n",
       "<td>Central Toronto\n",
       "</td>\n",
       "<td>Forest Hill North &amp; West\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M6P\n",
       "</td>\n",
       "<td>West Toronto\n",
       "</td>\n",
       "<td>High Park / The Junction South\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M7P\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M8P\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M9P\n",
       "</td>\n",
       "<td>Etobicoke\n",
       "</td>\n",
       "<td>Westmount\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M1R\n",
       "</td>\n",
       "<td>Scarborough\n",
       "</td>\n",
       "<td>Wexford / Maryvale\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M2R\n",
       "</td>\n",
       "<td>North York\n",
       "</td>\n",
       "<td>Willowdale\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M3R\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M4R\n",
       "</td>\n",
       "<td>Central Toronto\n",
       "</td>\n",
       "<td>North Toronto West\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M5R\n",
       "</td>\n",
       "<td>Central Toronto\n",
       "</td>\n",
       "<td>The Annex / North Midtown / Yorkville\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M6R\n",
       "</td>\n",
       "<td>West Toronto\n",
       "</td>\n",
       "<td>Parkdale / Roncesvalles\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M7R\n",
       "</td>\n",
       "<td>Mississauga\n",
       "</td>\n",
       "<td>Canada Post Gateway Processing Centre\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M8R\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M9R\n",
       "</td>\n",
       "<td>Etobicoke\n",
       "</td>\n",
       "<td>Kingsview Village / St. Phillips / Martin Grove Gardens / Richview Gardens\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M1S\n",
       "</td>\n",
       "<td>Scarborough\n",
       "</td>\n",
       "<td>Agincourt\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M2S\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M3S\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M4S\n",
       "</td>\n",
       "<td>Central Toronto\n",
       "</td>\n",
       "<td>Davisville\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M5S\n",
       "</td>\n",
       "<td>Downtown Toronto\n",
       "</td>\n",
       "<td>University of Toronto / Harbord\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M6S\n",
       "</td>\n",
       "<td>West Toronto\n",
       "</td>\n",
       "<td>Runnymede / Swansea\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M7S\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M8S\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M9S\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M1T\n",
       "</td>\n",
       "<td>Scarborough\n",
       "</td>\n",
       "<td>Clarks Corners / Tam O'Shanter / Sullivan\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M2T\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M3T\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M4T\n",
       "</td>\n",
       "<td>Central Toronto\n",
       "</td>\n",
       "<td>Moore Park / Summerhill East\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M5T\n",
       "</td>\n",
       "<td>Downtown Toronto\n",
       "</td>\n",
       "<td>Kensington Market / Chinatown / Grange Park\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M6T\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M7T\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M8T\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M9T\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M1V\n",
       "</td>\n",
       "<td>Scarborough\n",
       "</td>\n",
       "<td>Milliken / Agincourt North / Steeles East / L'Amoreaux East\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M2V\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M3V\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M4V\n",
       "</td>\n",
       "<td>Central Toronto\n",
       "</td>\n",
       "<td>Summerhill West / Rathnelly / South Hill / Forest Hill SE / Deer Park\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M5V\n",
       "</td>\n",
       "<td>Downtown Toronto\n",
       "</td>\n",
       "<td>CN Tower / King and Spadina / Railway Lands / Harbourfront West / Bathurst\n",
       "<pre> Quay / South Niagara / Island airport\n",
       "</pre>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M6V\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M7V\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M8V\n",
       "</td>\n",
       "<td>Etobicoke\n",
       "</td>\n",
       "<td>New Toronto / Mimico South / Humber Bay Shores\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M9V\n",
       "</td>\n",
       "<td>Etobicoke\n",
       "</td>\n",
       "<td>South Steeles / Silverstone / Humbergate / Jamestown / Mount Olive / Beaumond Heights / Thistletown / Albion Gardens\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M1W\n",
       "</td>\n",
       "<td>Scarborough\n",
       "</td>\n",
       "<td>Steeles West / L'Amoreaux West\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M2W\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M3W\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M4W\n",
       "</td>\n",
       "<td>Downtown Toronto\n",
       "</td>\n",
       "<td>Rosedale\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M5W\n",
       "</td>\n",
       "<td>Downtown Toronto\n",
       "</td>\n",
       "<td>Stn A PO Boxes\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M6W\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M7W\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M8W\n",
       "</td>\n",
       "<td>Etobicoke\n",
       "</td>\n",
       "<td>Alderwood / Long Branch\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M9W\n",
       "</td>\n",
       "<td>Etobicoke\n",
       "</td>\n",
       "<td>Northwest\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M1X\n",
       "</td>\n",
       "<td>Scarborough\n",
       "</td>\n",
       "<td>Upper Rouge\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M2X\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M3X\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M4X\n",
       "</td>\n",
       "<td>Downtown Toronto\n",
       "</td>\n",
       "<td>St. James Town / Cabbagetown\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M5X\n",
       "</td>\n",
       "<td>Downtown Toronto\n",
       "</td>\n",
       "<td>First Canadian Place / Underground city\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M6X\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M7X\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M8X\n",
       "</td>\n",
       "<td>Etobicoke\n",
       "</td>\n",
       "<td>The Kingsway / Montgomery Road  / Old Mill North\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M9X\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M1Y\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M2Y\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M3Y\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M4Y\n",
       "</td>\n",
       "<td>Downtown Toronto\n",
       "</td>\n",
       "<td>Church and Wellesley\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M5Y\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M6Y\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M7Y\n",
       "</td>\n",
       "<td>East Toronto\n",
       "</td>\n",
       "<td>Business reply mail Processing CentrE\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M8Y\n",
       "</td>\n",
       "<td>Etobicoke\n",
       "</td>\n",
       "<td>Old Mill South / King's Mill Park / Sunnylea / Humber Bay / Mimico NE / The Queensway East / Royal York South East / Kingsway Park South East\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M9Y\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M1Z\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M2Z\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M3Z\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M4Z\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M5Z\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M6Z\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M7Z\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M8Z\n",
       "</td>\n",
       "<td>Etobicoke\n",
       "</td>\n",
       "<td>Mimico NW / The Queensway West / South of Bloor / Kingsway Park South West / Royal York South West\n",
       "</td></tr>\n",
       "<tr>\n",
       "<td>M9Z\n",
       "</td>\n",
       "<td>Not assigned\n",
       "</td>\n",
       "<td>\n",
       "</td></tr></tbody></table>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "source = requests.get('https://en.wikipedia.org/wiki/List_of_postal_codes_of_Canada:_M').text\n",
    "soup=BeautifulSoup(source,'lxml')\n",
    "print(soup.title)\n",
    "from IPython.display import display_html\n",
    "tab = str(soup.table)\n",
    "display_html(tab,raw=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Transform HTML table to Pandas DataFrame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Documentation for reviewer: In this step I am transforming the HTML table into a Pandas dataframe. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Postal code</th>\n",
       "      <th>Borough</th>\n",
       "      <th>Neighborhood</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>M1A</td>\n",
       "      <td>Not assigned</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>M2A</td>\n",
       "      <td>Not assigned</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>M3A</td>\n",
       "      <td>North York</td>\n",
       "      <td>Parkwoods</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>M4A</td>\n",
       "      <td>North York</td>\n",
       "      <td>Victoria Village</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>M5A</td>\n",
       "      <td>Downtown Toronto</td>\n",
       "      <td>Regent Park / Harbourfront</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Postal code           Borough                Neighborhood\n",
       "0         M1A      Not assigned                         NaN\n",
       "1         M2A      Not assigned                         NaN\n",
       "2         M3A        North York                   Parkwoods\n",
       "3         M4A        North York            Victoria Village\n",
       "4         M5A  Downtown Toronto  Regent Park / Harbourfront"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfs = pd.read_html(tab)\n",
    "df=dfs[0]\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data preprocessing and cleaning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Documentation for reviewer: The data is now imported as a Pandas dataframe. In the next steps I am cleaning the data in order to get a structured format."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Postcode</th>\n",
       "      <th>Borough</th>\n",
       "      <th>Neighborhood</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>M3A</td>\n",
       "      <td>North York</td>\n",
       "      <td>Parkwoods</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>M4A</td>\n",
       "      <td>North York</td>\n",
       "      <td>Victoria Village</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>M5A</td>\n",
       "      <td>Downtown Toronto</td>\n",
       "      <td>Regent Park / Harbourfront</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>M6A</td>\n",
       "      <td>North York</td>\n",
       "      <td>Lawrence Manor / Lawrence Heights</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>M7A</td>\n",
       "      <td>Downtown Toronto</td>\n",
       "      <td>Queen's Park / Ontario Provincial Government</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Postcode           Borough                                  Neighborhood\n",
       "0      M3A        North York                                     Parkwoods\n",
       "1      M4A        North York                              Victoria Village\n",
       "2      M5A  Downtown Toronto                    Regent Park / Harbourfront\n",
       "3      M6A        North York             Lawrence Manor / Lawrence Heights\n",
       "4      M7A  Downtown Toronto  Queen's Park / Ontario Provincial Government"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Dropping all observations where Borough is 'Not assigned'\n",
    "df1 = df[df.Borough != 'Not assigned']\n",
    "\n",
    "# Combining the neighbourhoods with same Postal code\n",
    "df2 = df1.groupby(['Postal code','Borough'], sort=False).agg(', '.join)\n",
    "df2.reset_index(inplace=True)\n",
    "\n",
    "# Replacing the name of the neighbourhoods which are 'Not assigned' with names of Borough\n",
    "df2['Neighborhood'] = np.where(df2['Neighborhood'] == 'Not assigned',df2['Borough'], df2['Neighborhood'])\n",
    "\n",
    "df2.rename(columns={'Postal code':'Postcode'},inplace=True)\n",
    "df2.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Importing .csv with geospatial information"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Documentation for reviewer: In this step I am getting the dataset with the geospatial information. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Postal Code</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>M1B</td>\n",
       "      <td>43.806686</td>\n",
       "      <td>-79.194353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>M1C</td>\n",
       "      <td>43.784535</td>\n",
       "      <td>-79.160497</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>M1E</td>\n",
       "      <td>43.763573</td>\n",
       "      <td>-79.188711</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>M1G</td>\n",
       "      <td>43.770992</td>\n",
       "      <td>-79.216917</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>M1H</td>\n",
       "      <td>43.773136</td>\n",
       "      <td>-79.239476</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Postal Code   Latitude  Longitude\n",
       "0         M1B  43.806686 -79.194353\n",
       "1         M1C  43.784535 -79.160497\n",
       "2         M1E  43.763573 -79.188711\n",
       "3         M1G  43.770992 -79.216917\n",
       "4         M1H  43.773136 -79.239476"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lat_lon = pd.read_csv('https://cocl.us/Geospatial_data')\n",
    "lat_lon.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Merge both tables to combine geospatial information with neighborhood information"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Documentation for reviewer: Now I need to merge both dataframes:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Postcode</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>M1B</td>\n",
       "      <td>43.806686</td>\n",
       "      <td>-79.194353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>M1C</td>\n",
       "      <td>43.784535</td>\n",
       "      <td>-79.160497</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>M1E</td>\n",
       "      <td>43.763573</td>\n",
       "      <td>-79.188711</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>M1G</td>\n",
       "      <td>43.770992</td>\n",
       "      <td>-79.216917</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>M1H</td>\n",
       "      <td>43.773136</td>\n",
       "      <td>-79.239476</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Postcode   Latitude  Longitude\n",
       "0      M1B  43.806686 -79.194353\n",
       "1      M1C  43.784535 -79.160497\n",
       "2      M1E  43.763573 -79.188711\n",
       "3      M1G  43.770992 -79.216917\n",
       "4      M1H  43.773136 -79.239476"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lat_lon.rename(columns={'Postal Code':'Postcode'},inplace=True)\n",
    "lat_lon.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Postcode</th>\n",
       "      <th>Borough</th>\n",
       "      <th>Neighborhood</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>M3A</td>\n",
       "      <td>North York</td>\n",
       "      <td>Parkwoods</td>\n",
       "      <td>43.753259</td>\n",
       "      <td>-79.329656</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>M4A</td>\n",
       "      <td>North York</td>\n",
       "      <td>Victoria Village</td>\n",
       "      <td>43.725882</td>\n",
       "      <td>-79.315572</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>M5A</td>\n",
       "      <td>Downtown Toronto</td>\n",
       "      <td>Regent Park / Harbourfront</td>\n",
       "      <td>43.654260</td>\n",
       "      <td>-79.360636</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>M6A</td>\n",
       "      <td>North York</td>\n",
       "      <td>Lawrence Manor / Lawrence Heights</td>\n",
       "      <td>43.718518</td>\n",
       "      <td>-79.464763</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>M7A</td>\n",
       "      <td>Downtown Toronto</td>\n",
       "      <td>Queen's Park / Ontario Provincial Government</td>\n",
       "      <td>43.662301</td>\n",
       "      <td>-79.389494</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Postcode           Borough                                  Neighborhood  \\\n",
       "0      M3A        North York                                     Parkwoods   \n",
       "1      M4A        North York                              Victoria Village   \n",
       "2      M5A  Downtown Toronto                    Regent Park / Harbourfront   \n",
       "3      M6A        North York             Lawrence Manor / Lawrence Heights   \n",
       "4      M7A  Downtown Toronto  Queen's Park / Ontario Provincial Government   \n",
       "\n",
       "    Latitude  Longitude  \n",
       "0  43.753259 -79.329656  \n",
       "1  43.725882 -79.315572  \n",
       "2  43.654260 -79.360636  \n",
       "3  43.718518 -79.464763  \n",
       "4  43.662301 -79.389494  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3 = pd.merge(df2,lat_lon,on='Postcode')\n",
    "df3.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Postcode</th>\n",
       "      <th>Borough</th>\n",
       "      <th>Neighborhood</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>M5A</td>\n",
       "      <td>Downtown Toronto</td>\n",
       "      <td>Regent Park / Harbourfront</td>\n",
       "      <td>43.654260</td>\n",
       "      <td>-79.360636</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>M7A</td>\n",
       "      <td>Downtown Toronto</td>\n",
       "      <td>Queen's Park / Ontario Provincial Government</td>\n",
       "      <td>43.662301</td>\n",
       "      <td>-79.389494</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>M5B</td>\n",
       "      <td>Downtown Toronto</td>\n",
       "      <td>Garden District, Ryerson</td>\n",
       "      <td>43.657162</td>\n",
       "      <td>-79.378937</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>M5C</td>\n",
       "      <td>Downtown Toronto</td>\n",
       "      <td>St. James Town</td>\n",
       "      <td>43.651494</td>\n",
       "      <td>-79.375418</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>M4E</td>\n",
       "      <td>East Toronto</td>\n",
       "      <td>The Beaches</td>\n",
       "      <td>43.676357</td>\n",
       "      <td>-79.293031</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Postcode           Borough                                  Neighborhood  \\\n",
       "2       M5A  Downtown Toronto                    Regent Park / Harbourfront   \n",
       "4       M7A  Downtown Toronto  Queen's Park / Ontario Provincial Government   \n",
       "9       M5B  Downtown Toronto                      Garden District, Ryerson   \n",
       "15      M5C  Downtown Toronto                                St. James Town   \n",
       "19      M4E      East Toronto                                   The Beaches   \n",
       "\n",
       "     Latitude  Longitude  \n",
       "2   43.654260 -79.360636  \n",
       "4   43.662301 -79.389494  \n",
       "9   43.657162 -79.378937  \n",
       "15  43.651494 -79.375418  \n",
       "19  43.676357 -79.293031  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Documentation for reviewer: Retrieve rows which contain Toronto in their Borough\n",
    "df4 = df3[df3['Borough'].str.contains('Toronto',regex=False)]\n",
    "df4.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Visualize ALL neighborhoods in Toronto using Folium"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Documentation for reviewer: In this step I am visualizing all neighborhoods in Toronto with Folium. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><iframe src=\"about:blank\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" data-html=PCFET0NUWVBFIGh0bWw+CjxoZWFkPiAgICAKICAgIDxtZXRhIGh0dHAtZXF1aXY9ImNvbnRlbnQtdHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PVVURi04IiAvPgogICAgPHNjcmlwdD5MX1BSRUZFUl9DQU5WQVMgPSBmYWxzZTsgTF9OT19UT1VDSCA9IGZhbHNlOyBMX0RJU0FCTEVfM0QgPSBmYWxzZTs8L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL2xlYWZsZXRAMS4yLjAvZGlzdC9sZWFmbGV0LmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJodHRwczovL2FqYXguZ29vZ2xlYXBpcy5jb20vYWpheC9saWJzL2pxdWVyeS8xLjExLjEvanF1ZXJ5Lm1pbi5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9tYXhjZG4uYm9vdHN0cmFwY2RuLmNvbS9ib290c3RyYXAvMy4yLjAvanMvYm9vdHN0cmFwLm1pbi5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvTGVhZmxldC5hd2Vzb21lLW1hcmtlcnMvMi4wLjIvbGVhZmxldC5hd2Vzb21lLW1hcmtlcnMuanMiPjwvc2NyaXB0PgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL2xlYWZsZXRAMS4yLjAvZGlzdC9sZWFmbGV0LmNzcyIvPgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL21heGNkbi5ib290c3RyYXBjZG4uY29tL2Jvb3RzdHJhcC8zLjIuMC9jc3MvYm9vdHN0cmFwLm1pbi5jc3MiLz4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iaHR0cHM6Ly9tYXhjZG4uYm9vdHN0cmFwY2RuLmNvbS9ib290c3RyYXAvMy4yLjAvY3NzL2Jvb3RzdHJhcC10aGVtZS5taW4uY3NzIi8+CiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Imh0dHBzOi8vbWF4Y2RuLmJvb3RzdHJhcGNkbi5jb20vZm9udC1hd2Vzb21lLzQuNi4zL2Nzcy9mb250LWF3ZXNvbWUubWluLmNzcyIvPgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9MZWFmbGV0LmF3ZXNvbWUtbWFya2Vycy8yLjAuMi9sZWFmbGV0LmF3ZXNvbWUtbWFya2Vycy5jc3MiLz4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iaHR0cHM6Ly9yYXdnaXQuY29tL3B5dGhvbi12aXN1YWxpemF0aW9uL2ZvbGl1bS9tYXN0ZXIvZm9saXVtL3RlbXBsYXRlcy9sZWFmbGV0LmF3ZXNvbWUucm90YXRlLmNzcyIvPgogICAgPHN0eWxlPmh0bWwsIGJvZHkge3dpZHRoOiAxMDAlO2hlaWdodDogMTAwJTttYXJnaW46IDA7cGFkZGluZzogMDt9PC9zdHlsZT4KICAgIDxzdHlsZT4jbWFwIHtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtib3R0b206MDtyaWdodDowO2xlZnQ6MDt9PC9zdHlsZT4KICAgIAogICAgICAgICAgICA8c3R5bGU+ICNtYXBfZDg3MzJjZTJjNjJjNGQ2YjhhZjc3YzFmNzFkZTFhNDQgewogICAgICAgICAgICAgICAgcG9zaXRpb24gOiByZWxhdGl2ZTsKICAgICAgICAgICAgICAgIHdpZHRoIDogMTAwLjAlOwogICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAuMCU7CiAgICAgICAgICAgICAgICBsZWZ0OiAwLjAlOwogICAgICAgICAgICAgICAgdG9wOiAwLjAlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICA8L3N0eWxlPgogICAgICAgIAo8L2hlYWQ+Cjxib2R5PiAgICAKICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb2xpdW0tbWFwIiBpZD0ibWFwX2Q4NzMyY2UyYzYyYzRkNmI4YWY3N2MxZjcxZGUxYTQ0IiA+PC9kaXY+CiAgICAgICAgCjwvYm9keT4KPHNjcmlwdD4gICAgCiAgICAKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGJvdW5kcyA9IG51bGw7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIG1hcF9kODczMmNlMmM2MmM0ZDZiOGFmNzdjMWY3MWRlMWE0NCA9IEwubWFwKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ21hcF9kODczMmNlMmM2MmM0ZDZiOGFmNzdjMWY3MWRlMWE0NCcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Y2VudGVyOiBbNDMuNjUxMDcsLTc5LjM0NzAxNV0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB6b29tOiAxMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heEJvdW5kczogYm91bmRzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJzOiBbXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdvcmxkQ29weUp1bXA6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JzOiBMLkNSUy5FUFNHMzg1NwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHRpbGVfbGF5ZXJfMzE4N2RiYjg1NmQyNDYwYTk4YTMxYmU1NmM0ZDE0ZWIgPSBMLnRpbGVMYXllcigKICAgICAgICAgICAgICAgICdodHRwczovL3tzfS50aWxlLm9wZW5zdHJlZXRtYXAub3JnL3t6fS97eH0ve3l9LnBuZycsCiAgICAgICAgICAgICAgICB7CiAgImF0dHJpYnV0aW9uIjogbnVsbCwKICAiZGV0ZWN0UmV0aW5hIjogZmFsc2UsCiAgIm1heFpvb20iOiAxOCwKICAibWluWm9vbSI6IDEsCiAgIm5vV3JhcCI6IGZhbHNlLAogICJzdWJkb21haW5zIjogImFiYyIKfQogICAgICAgICAgICAgICAgKS5hZGRUbyhtYXBfZDg3MzJjZTJjNjJjNGQ2YjhhZjc3YzFmNzFkZTFhNDQpOwogICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzlkMmRiYjAwZDcyNDQzNmE4ZmVlOTY2NzI4MzVlNzY3ID0gTC5jaXJjbGVNYXJrZXIoCiAgICAgICAgICAgICAgICBbNDMuNjU0MjU5OSwtNzkuMzYwNjM1OV0sCiAgICAgICAgICAgICAgICB7CiAgImJ1YmJsaW5nTW91c2VFdmVudHMiOiB0cnVlLAogICJjb2xvciI6ICJibHVlIiwKICAiZGFzaEFycmF5IjogbnVsbCwKICAiZGFzaE9mZnNldCI6IG51bGwsCiAgImZpbGwiOiB0cnVlLAogICJmaWxsQ29sb3IiOiAiIzMxODZjYyIsCiAgImZpbGxPcGFjaXR5IjogMC43LAogICJmaWxsUnVsZSI6ICJldmVub2RkIiwKICAibGluZUNhcCI6ICJyb3VuZCIsCiAgImxpbmVKb2luIjogInJvdW5kIiwKICAib3BhY2l0eSI6IDEuMCwKICAicmFkaXVzIjogNSwKICAic3Ryb2tlIjogdHJ1ZSwKICAid2VpZ2h0IjogMwp9CiAgICAgICAgICAgICAgICApLmFkZFRvKG1hcF9kODczMmNlMmM2MmM0ZDZiOGFmNzdjMWY3MWRlMWE0NCk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF81OGUzNWJhZGVmYjI0ZDc3YmYwMjY0Y2NhOTY4MzZkOSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF84Mjg0NTQyNGU3MjA0ZWU0OWJiZWNmOTQ4NzBjMzEwOCA9ICQoJzxkaXYgaWQ9Imh0bWxfODI4NDU0MjRlNzIwNGVlNDliYmVjZjk0ODcwYzMxMDgiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPlJlZ2VudCBQYXJrIC8gSGFyYm91cmZyb250LCBEb3dudG93biBUb3JvbnRvPC9kaXY+JylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF81OGUzNWJhZGVmYjI0ZDc3YmYwMjY0Y2NhOTY4MzZkOS5zZXRDb250ZW50KGh0bWxfODI4NDU0MjRlNzIwNGVlNDliYmVjZjk0ODcwYzMxMDgpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfOWQyZGJiMDBkNzI0NDM2YThmZWU5NjY3MjgzNWU3NjcuYmluZFBvcHVwKHBvcHVwXzU4ZTM1YmFkZWZiMjRkNzdiZjAyNjRjY2E5NjgzNmQ5KTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzMwMTFhODlhYTUyMDQzZDU5OGY3MzBhMDM5NGRmZGMwID0gTC5jaXJjbGVNYXJrZXIoCiAgICAgICAgICAgICAgICBbNDMuNjYyMzAxNSwtNzkuMzg5NDkzOF0sCiAgICAgICAgICAgICAgICB7CiAgImJ1YmJsaW5nTW91c2VFdmVudHMiOiB0cnVlLAogICJjb2xvciI6ICJibHVlIiwKICAiZGFzaEFycmF5IjogbnVsbCwKICAiZGFzaE9mZnNldCI6IG51bGwsCiAgImZpbGwiOiB0cnVlLAogICJmaWxsQ29sb3IiOiAiIzMxODZjYyIsCiAgImZpbGxPcGFjaXR5IjogMC43LAogICJmaWxsUnVsZSI6ICJldmVub2RkIiwKICAibGluZUNhcCI6ICJyb3VuZCIsCiAgImxpbmVKb2luIjogInJvdW5kIiwKICAib3BhY2l0eSI6IDEuMCwKICAicmFkaXVzIjogNSwKICAic3Ryb2tlIjogdHJ1ZSwKICAid2VpZ2h0IjogMwp9CiAgICAgICAgICAgICAgICApLmFkZFRvKG1hcF9kODczMmNlMmM2MmM0ZDZiOGFmNzdjMWY3MWRlMWE0NCk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF8zNTFmNWMyMTI4OWE0NThhOGNlODkwZWY4ZDFlNGMwZCA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF80MTI5ZWFiMjlkMGI0NDg3YWZlMTlkOTcyOWU2M2I1NyA9ICQoJzxkaXYgaWQ9Imh0bWxfNDEyOWVhYjI5ZDBiNDQ4N2FmZTE5ZDk3MjllNjNiNTciIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPlF1ZWVuJiMzOTtzIFBhcmsgLyBPbnRhcmlvIFByb3ZpbmNpYWwgR292ZXJubWVudCwgRG93bnRvd24gVG9yb250bzwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfMzUxZjVjMjEyODlhNDU4YThjZTg5MGVmOGQxZTRjMGQuc2V0Q29udGVudChodG1sXzQxMjllYWIyOWQwYjQ0ODdhZmUxOWQ5NzI5ZTYzYjU3KTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzMwMTFhODlhYTUyMDQzZDU5OGY3MzBhMDM5NGRmZGMwLmJpbmRQb3B1cChwb3B1cF8zNTFmNWMyMTI4OWE0NThhOGNlODkwZWY4ZDFlNGMwZCk7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl9iOGNkOGVlNjdiY2U0OTQyYjA3OWY4N2I2MmRkNzMwNCA9IEwuY2lyY2xlTWFya2VyKAogICAgICAgICAgICAgICAgWzQzLjY1NzE2MTgsLTc5LjM3ODkzNzA5OTk5OTk5XSwKICAgICAgICAgICAgICAgIHsKICAiYnViYmxpbmdNb3VzZUV2ZW50cyI6IHRydWUsCiAgImNvbG9yIjogImJsdWUiLAogICJkYXNoQXJyYXkiOiBudWxsLAogICJkYXNoT2Zmc2V0IjogbnVsbCwKICAiZmlsbCI6IHRydWUsCiAgImZpbGxDb2xvciI6ICIjMzE4NmNjIiwKICAiZmlsbE9wYWNpdHkiOiAwLjcsCiAgImZpbGxSdWxlIjogImV2ZW5vZGQiLAogICJsaW5lQ2FwIjogInJvdW5kIiwKICAibGluZUpvaW4iOiAicm91bmQiLAogICJvcGFjaXR5IjogMS4wLAogICJyYWRpdXMiOiA1LAogICJzdHJva2UiOiB0cnVlLAogICJ3ZWlnaHQiOiAzCn0KICAgICAgICAgICAgICAgICkuYWRkVG8obWFwX2Q4NzMyY2UyYzYyYzRkNmI4YWY3N2MxZjcxZGUxYTQ0KTsKICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHBvcHVwX2RlM2I4NGZkY2NmMjQ2NzU4MmQ0MTA4YTA3NTA5MGUxID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sX2RhMGQzY2M3MzlkMTRlMWZiYjY3ODc4M2NmZWExZGVlID0gJCgnPGRpdiBpZD0iaHRtbF9kYTBkM2NjNzM5ZDE0ZTFmYmI2Nzg3ODNjZmVhMWRlZSIgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+R2FyZGVuIERpc3RyaWN0LCBSeWVyc29uLCBEb3dudG93biBUb3JvbnRvPC9kaXY+JylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF9kZTNiODRmZGNjZjI0Njc1ODJkNDEwOGEwNzUwOTBlMS5zZXRDb250ZW50KGh0bWxfZGEwZDNjYzczOWQxNGUxZmJiNjc4NzgzY2ZlYTFkZWUpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfYjhjZDhlZTY3YmNlNDk0MmIwNzlmODdiNjJkZDczMDQuYmluZFBvcHVwKHBvcHVwX2RlM2I4NGZkY2NmMjQ2NzU4MmQ0MTA4YTA3NTA5MGUxKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyX2Y3OWEwNDFiYWQ1MjRiOTNhMTVjNzM4M2IyYWRjOWQ5ID0gTC5jaXJjbGVNYXJrZXIoCiAgICAgICAgICAgICAgICBbNDMuNjUxNDkzOSwtNzkuMzc1NDE3OV0sCiAgICAgICAgICAgICAgICB7CiAgImJ1YmJsaW5nTW91c2VFdmVudHMiOiB0cnVlLAogICJjb2xvciI6ICJibHVlIiwKICAiZGFzaEFycmF5IjogbnVsbCwKICAiZGFzaE9mZnNldCI6IG51bGwsCiAgImZpbGwiOiB0cnVlLAogICJmaWxsQ29sb3IiOiAiIzMxODZjYyIsCiAgImZpbGxPcGFjaXR5IjogMC43LAogICJmaWxsUnVsZSI6ICJldmVub2RkIiwKICAibGluZUNhcCI6ICJyb3VuZCIsCiAgImxpbmVKb2luIjogInJvdW5kIiwKICAib3BhY2l0eSI6IDEuMCwKICAicmFkaXVzIjogNSwKICAic3Ryb2tlIjogdHJ1ZSwKICAid2VpZ2h0IjogMwp9CiAgICAgICAgICAgICAgICApLmFkZFRvKG1hcF9kODczMmNlMmM2MmM0ZDZiOGFmNzdjMWY3MWRlMWE0NCk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF85MGEyNDBlZDQxMmU0ODA5OWE0YjZmZmNmYmJiYmQ3MSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF8zOTY5NTYzM2UxYTM0NzE2OTQ4NzhlMzM1ZDJmYjM3MSA9ICQoJzxkaXYgaWQ9Imh0bWxfMzk2OTU2MzNlMWEzNDcxNjk0ODc4ZTMzNWQyZmIzNzEiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPlN0LiBKYW1lcyBUb3duLCBEb3dudG93biBUb3JvbnRvPC9kaXY+JylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF85MGEyNDBlZDQxMmU0ODA5OWE0YjZmZmNmYmJiYmQ3MS5zZXRDb250ZW50KGh0bWxfMzk2OTU2MzNlMWEzNDcxNjk0ODc4ZTMzNWQyZmIzNzEpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfZjc5YTA0MWJhZDUyNGI5M2ExNWM3MzgzYjJhZGM5ZDkuYmluZFBvcHVwKHBvcHVwXzkwYTI0MGVkNDEyZTQ4MDk5YTRiNmZmY2ZiYmJiZDcxKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzE2MTgwMTUxNTY0ODRhZjViM2JiNjcyZmU2Njc5NWI5ID0gTC5jaXJjbGVNYXJrZXIoCiAgICAgICAgICAgICAgICBbNDMuNjc2MzU3Mzk5OTk5OTksLTc5LjI5MzAzMTJdLAogICAgICAgICAgICAgICAgewogICJidWJibGluZ01vdXNlRXZlbnRzIjogdHJ1ZSwKICAiY29sb3IiOiAiYmx1ZSIsCiAgImRhc2hBcnJheSI6IG51bGwsCiAgImRhc2hPZmZzZXQiOiBudWxsLAogICJmaWxsIjogdHJ1ZSwKICAiZmlsbENvbG9yIjogIiMzMTg2Y2MiLAogICJmaWxsT3BhY2l0eSI6IDAuNywKICAiZmlsbFJ1bGUiOiAiZXZlbm9kZCIsCiAgImxpbmVDYXAiOiAicm91bmQiLAogICJsaW5lSm9pbiI6ICJyb3VuZCIsCiAgIm9wYWNpdHkiOiAxLjAsCiAgInJhZGl1cyI6IDUsCiAgInN0cm9rZSI6IHRydWUsCiAgIndlaWdodCI6IDMKfQogICAgICAgICAgICAgICAgKS5hZGRUbyhtYXBfZDg3MzJjZTJjNjJjNGQ2YjhhZjc3YzFmNzFkZTFhNDQpOwogICAgICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfZTZmODVjZjc4M2Y3NDhlYzliZDMwNDI0Mzc3NjhjOTIgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfMmNkMzU5N2M5NTA0NDU0N2FlNGQwMGJhNDhhOWNjNjAgPSAkKCc8ZGl2IGlkPSJodG1sXzJjZDM1OTdjOTUwNDQ1NDdhZTRkMDBiYTQ4YTljYzYwIiBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij5UaGUgQmVhY2hlcywgRWFzdCBUb3JvbnRvPC9kaXY+JylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF9lNmY4NWNmNzgzZjc0OGVjOWJkMzA0MjQzNzc2OGM5Mi5zZXRDb250ZW50KGh0bWxfMmNkMzU5N2M5NTA0NDU0N2FlNGQwMGJhNDhhOWNjNjApOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfMTYxODAxNTE1NjQ4NGFmNWIzYmI2NzJmZTY2Nzk1YjkuYmluZFBvcHVwKHBvcHVwX2U2Zjg1Y2Y3ODNmNzQ4ZWM5YmQzMDQyNDM3NzY4YzkyKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyX2RmZDkzOTA2MjY1NzRlNjU4MTdlYjBkNzZiNjZmZTExID0gTC5jaXJjbGVNYXJrZXIoCiAgICAgICAgICAgICAgICBbNDMuNjQ0NzcwNzk5OTk5OTk2LC03OS4zNzMzMDY0XSwKICAgICAgICAgICAgICAgIHsKICAiYnViYmxpbmdNb3VzZUV2ZW50cyI6IHRydWUsCiAgImNvbG9yIjogImJsdWUiLAogICJkYXNoQXJyYXkiOiBudWxsLAogICJkYXNoT2Zmc2V0IjogbnVsbCwKICAiZmlsbCI6IHRydWUsCiAgImZpbGxDb2xvciI6ICIjMzE4NmNjIiwKICAiZmlsbE9wYWNpdHkiOiAwLjcsCiAgImZpbGxSdWxlIjogImV2ZW5vZGQiLAogICJsaW5lQ2FwIjogInJvdW5kIiwKICAibGluZUpvaW4iOiAicm91bmQiLAogICJvcGFjaXR5IjogMS4wLAogICJyYWRpdXMiOiA1LAogICJzdHJva2UiOiB0cnVlLAogICJ3ZWlnaHQiOiAzCn0KICAgICAgICAgICAgICAgICkuYWRkVG8obWFwX2Q4NzMyY2UyYzYyYzRkNmI4YWY3N2MxZjcxZGUxYTQ0KTsKICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzkzZDA5NWFmYWFkNzRiYjU5NGU5NzYyYjcwZDJmNWM1ID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzczNmM0NjA4ZWU1NDQ2ZDliYmVhOWFmZTk4NjdmNDQ2ID0gJCgnPGRpdiBpZD0iaHRtbF83MzZjNDYwOGVlNTQ0NmQ5YmJlYTlhZmU5ODY3ZjQ0NiIgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+QmVyY3p5IFBhcmssIERvd250b3duIFRvcm9udG88L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzkzZDA5NWFmYWFkNzRiYjU5NGU5NzYyYjcwZDJmNWM1LnNldENvbnRlbnQoaHRtbF83MzZjNDYwOGVlNTQ0NmQ5YmJlYTlhZmU5ODY3ZjQ0Nik7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl9kZmQ5MzkwNjI2NTc0ZTY1ODE3ZWIwZDc2YjY2ZmUxMS5iaW5kUG9wdXAocG9wdXBfOTNkMDk1YWZhYWQ3NGJiNTk0ZTk3NjJiNzBkMmY1YzUpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfMDI0NGY1ZjM4ZWU1NDA3NmI1NmY3ZTkyNGYyMmVmYjEgPSBMLmNpcmNsZU1hcmtlcigKICAgICAgICAgICAgICAgIFs0My42NTc5NTI0LC03OS4zODczODI2XSwKICAgICAgICAgICAgICAgIHsKICAiYnViYmxpbmdNb3VzZUV2ZW50cyI6IHRydWUsCiAgImNvbG9yIjogImJsdWUiLAogICJkYXNoQXJyYXkiOiBudWxsLAogICJkYXNoT2Zmc2V0IjogbnVsbCwKICAiZmlsbCI6IHRydWUsCiAgImZpbGxDb2xvciI6ICIjMzE4NmNjIiwKICAiZmlsbE9wYWNpdHkiOiAwLjcsCiAgImZpbGxSdWxlIjogImV2ZW5vZGQiLAogICJsaW5lQ2FwIjogInJvdW5kIiwKICAibGluZUpvaW4iOiAicm91bmQiLAogICJvcGFjaXR5IjogMS4wLAogICJyYWRpdXMiOiA1LAogICJzdHJva2UiOiB0cnVlLAogICJ3ZWlnaHQiOiAzCn0KICAgICAgICAgICAgICAgICkuYWRkVG8obWFwX2Q4NzMyY2UyYzYyYzRkNmI4YWY3N2MxZjcxZGUxYTQ0KTsKICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzM4ZjRiNzMyYjNiNDQzY2I5ZTQ5ODExYmMzM2E1ODUyID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzIyNGI0YmQyZjYwNjQ2NTJiN2I2YTcyNDQ4Mjc4OWM4ID0gJCgnPGRpdiBpZD0iaHRtbF8yMjRiNGJkMmY2MDY0NjUyYjdiNmE3MjQ0ODI3ODljOCIgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+Q2VudHJhbCBCYXkgU3RyZWV0LCBEb3dudG93biBUb3JvbnRvPC9kaXY+JylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF8zOGY0YjczMmIzYjQ0M2NiOWU0OTgxMWJjMzNhNTg1Mi5zZXRDb250ZW50KGh0bWxfMjI0YjRiZDJmNjA2NDY1MmI3YjZhNzI0NDgyNzg5YzgpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfMDI0NGY1ZjM4ZWU1NDA3NmI1NmY3ZTkyNGYyMmVmYjEuYmluZFBvcHVwKHBvcHVwXzM4ZjRiNzMyYjNiNDQzY2I5ZTQ5ODExYmMzM2E1ODUyKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzc0NjU4NjQ2ZjBkNzQwZjc5YjU5YWIwYWQ5OTFiYTU5ID0gTC5jaXJjbGVNYXJrZXIoCiAgICAgICAgICAgICAgICBbNDMuNjY5NTQyLC03OS40MjI1NjM3XSwKICAgICAgICAgICAgICAgIHsKICAiYnViYmxpbmdNb3VzZUV2ZW50cyI6IHRydWUsCiAgImNvbG9yIjogImJsdWUiLAogICJkYXNoQXJyYXkiOiBudWxsLAogICJkYXNoT2Zmc2V0IjogbnVsbCwKICAiZmlsbCI6IHRydWUsCiAgImZpbGxDb2xvciI6ICIjMzE4NmNjIiwKICAiZmlsbE9wYWNpdHkiOiAwLjcsCiAgImZpbGxSdWxlIjogImV2ZW5vZGQiLAogICJsaW5lQ2FwIjogInJvdW5kIiwKICAibGluZUpvaW4iOiAicm91bmQiLAogICJvcGFjaXR5IjogMS4wLAogICJyYWRpdXMiOiA1LAogICJzdHJva2UiOiB0cnVlLAogICJ3ZWlnaHQiOiAzCn0KICAgICAgICAgICAgICAgICkuYWRkVG8obWFwX2Q4NzMyY2UyYzYyYzRkNmI4YWY3N2MxZjcxZGUxYTQ0KTsKICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzMwNzI0MGE0MjQ1ZDRiZWU5MTJlYzdmNGVjYmU4MTViID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzFlNTYwMzYwZDFmZjQ2NjFhYjZkY2E3MTIyNTFhYzg2ID0gJCgnPGRpdiBpZD0iaHRtbF8xZTU2MDM2MGQxZmY0NjYxYWI2ZGNhNzEyMjUxYWM4NiIgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+Q2hyaXN0aWUsIERvd250b3duIFRvcm9udG88L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzMwNzI0MGE0MjQ1ZDRiZWU5MTJlYzdmNGVjYmU4MTViLnNldENvbnRlbnQoaHRtbF8xZTU2MDM2MGQxZmY0NjYxYWI2ZGNhNzEyMjUxYWM4Nik7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl83NDY1ODY0NmYwZDc0MGY3OWI1OWFiMGFkOTkxYmE1OS5iaW5kUG9wdXAocG9wdXBfMzA3MjQwYTQyNDVkNGJlZTkxMmVjN2Y0ZWNiZTgxNWIpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfYmVjMDFjN2Y5NmE2NDZmYmJmNGE1MjUzNWY0ZTEzMDkgPSBMLmNpcmNsZU1hcmtlcigKICAgICAgICAgICAgICAgIFs0My42NTA1NzEyMDAwMDAwMSwtNzkuMzg0NTY3NV0sCiAgICAgICAgICAgICAgICB7CiAgImJ1YmJsaW5nTW91c2VFdmVudHMiOiB0cnVlLAogICJjb2xvciI6ICJibHVlIiwKICAiZGFzaEFycmF5IjogbnVsbCwKICAiZGFzaE9mZnNldCI6IG51bGwsCiAgImZpbGwiOiB0cnVlLAogICJmaWxsQ29sb3IiOiAiIzMxODZjYyIsCiAgImZpbGxPcGFjaXR5IjogMC43LAogICJmaWxsUnVsZSI6ICJldmVub2RkIiwKICAibGluZUNhcCI6ICJyb3VuZCIsCiAgImxpbmVKb2luIjogInJvdW5kIiwKICAib3BhY2l0eSI6IDEuMCwKICAicmFkaXVzIjogNSwKICAic3Ryb2tlIjogdHJ1ZSwKICAid2VpZ2h0IjogMwp9CiAgICAgICAgICAgICAgICApLmFkZFRvKG1hcF9kODczMmNlMmM2MmM0ZDZiOGFmNzdjMWY3MWRlMWE0NCk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9iYTQ2MjRmZGJmNDM0MTA0OTI5MzhhMzlkOTkwMzRlMCA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF8wNTMwNDVhMTE2M2U0OWU3OTk2NzhkZTMxMTAwOTBiMyA9ICQoJzxkaXYgaWQ9Imh0bWxfMDUzMDQ1YTExNjNlNDllNzk5Njc4ZGUzMTEwMDkwYjMiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPlJpY2htb25kIC8gQWRlbGFpZGUgLyBLaW5nLCBEb3dudG93biBUb3JvbnRvPC9kaXY+JylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF9iYTQ2MjRmZGJmNDM0MTA0OTI5MzhhMzlkOTkwMzRlMC5zZXRDb250ZW50KGh0bWxfMDUzMDQ1YTExNjNlNDllNzk5Njc4ZGUzMTEwMDkwYjMpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfYmVjMDFjN2Y5NmE2NDZmYmJmNGE1MjUzNWY0ZTEzMDkuYmluZFBvcHVwKHBvcHVwX2JhNDYyNGZkYmY0MzQxMDQ5MjkzOGEzOWQ5OTAzNGUwKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyX2VmNzdlMTViMTIzMjRkMzFhOGUwODY3ZTlkMWMyOGFhID0gTC5jaXJjbGVNYXJrZXIoCiAgICAgICAgICAgICAgICBbNDMuNjY5MDA1MTAwMDAwMDEsLTc5LjQ0MjI1OTNdLAogICAgICAgICAgICAgICAgewogICJidWJibGluZ01vdXNlRXZlbnRzIjogdHJ1ZSwKICAiY29sb3IiOiAiYmx1ZSIsCiAgImRhc2hBcnJheSI6IG51bGwsCiAgImRhc2hPZmZzZXQiOiBudWxsLAogICJmaWxsIjogdHJ1ZSwKICAiZmlsbENvbG9yIjogIiMzMTg2Y2MiLAogICJmaWxsT3BhY2l0eSI6IDAuNywKICAiZmlsbFJ1bGUiOiAiZXZlbm9kZCIsCiAgImxpbmVDYXAiOiAicm91bmQiLAogICJsaW5lSm9pbiI6ICJyb3VuZCIsCiAgIm9wYWNpdHkiOiAxLjAsCiAgInJhZGl1cyI6IDUsCiAgInN0cm9rZSI6IHRydWUsCiAgIndlaWdodCI6IDMKfQogICAgICAgICAgICAgICAgKS5hZGRUbyhtYXBfZDg3MzJjZTJjNjJjNGQ2YjhhZjc3YzFmNzFkZTFhNDQpOwogICAgICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfYTM3NGFlMmEzM2U5NDk0ZGI2OGM3OWJlNTg5YzBkN2IgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfMWQ1NTVlMzU0ZDA4NDIzNmEyYzlkOWQ5NjgwYzRiYWUgPSAkKCc8ZGl2IGlkPSJodG1sXzFkNTU1ZTM1NGQwODQyMzZhMmM5ZDlkOTY4MGM0YmFlIiBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij5EdWZmZXJpbiAvIERvdmVyY291cnQgVmlsbGFnZSwgV2VzdCBUb3JvbnRvPC9kaXY+JylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF9hMzc0YWUyYTMzZTk0OTRkYjY4Yzc5YmU1ODljMGQ3Yi5zZXRDb250ZW50KGh0bWxfMWQ1NTVlMzU0ZDA4NDIzNmEyYzlkOWQ5NjgwYzRiYWUpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfZWY3N2UxNWIxMjMyNGQzMWE4ZTA4NjdlOWQxYzI4YWEuYmluZFBvcHVwKHBvcHVwX2EzNzRhZTJhMzNlOTQ5NGRiNjhjNzliZTU4OWMwZDdiKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzdjZWVmYjRiZmUzNjQ5YzhiZTBlYWIxNTUzOTljMzk2ID0gTC5jaXJjbGVNYXJrZXIoCiAgICAgICAgICAgICAgICBbNDMuNjQwODE1NywtNzkuMzgxNzUyMjk5OTk5OTldLAogICAgICAgICAgICAgICAgewogICJidWJibGluZ01vdXNlRXZlbnRzIjogdHJ1ZSwKICAiY29sb3IiOiAiYmx1ZSIsCiAgImRhc2hBcnJheSI6IG51bGwsCiAgImRhc2hPZmZzZXQiOiBudWxsLAogICJmaWxsIjogdHJ1ZSwKICAiZmlsbENvbG9yIjogIiMzMTg2Y2MiLAogICJmaWxsT3BhY2l0eSI6IDAuNywKICAiZmlsbFJ1bGUiOiAiZXZlbm9kZCIsCiAgImxpbmVDYXAiOiAicm91bmQiLAogICJsaW5lSm9pbiI6ICJyb3VuZCIsCiAgIm9wYWNpdHkiOiAxLjAsCiAgInJhZGl1cyI6IDUsCiAgInN0cm9rZSI6IHRydWUsCiAgIndlaWdodCI6IDMKfQogICAgICAgICAgICAgICAgKS5hZGRUbyhtYXBfZDg3MzJjZTJjNjJjNGQ2YjhhZjc3YzFmNzFkZTFhNDQpOwogICAgICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfNzhlNmMxNzdkNjQ5NDdlNjgxNDFjNjFiYzdiOTkxYTQgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfYzI4YjRiZmFhZGNmNDUxZWFiOTg5YzAxODQ2YWUzNTEgPSAkKCc8ZGl2IGlkPSJodG1sX2MyOGI0YmZhYWRjZjQ1MWVhYjk4OWMwMTg0NmFlMzUxIiBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij5IYXJib3VyZnJvbnQgRWFzdCAvIFVuaW9uIFN0YXRpb24gLyBUb3JvbnRvIElzbGFuZHMsIERvd250b3duIFRvcm9udG88L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzc4ZTZjMTc3ZDY0OTQ3ZTY4MTQxYzYxYmM3Yjk5MWE0LnNldENvbnRlbnQoaHRtbF9jMjhiNGJmYWFkY2Y0NTFlYWI5ODljMDE4NDZhZTM1MSk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl83Y2VlZmI0YmZlMzY0OWM4YmUwZWFiMTU1Mzk5YzM5Ni5iaW5kUG9wdXAocG9wdXBfNzhlNmMxNzdkNjQ5NDdlNjgxNDFjNjFiYzdiOTkxYTQpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfZTljMmMxNDgwMDY0NDU2OTkzOTlkNzlhNWE5NjhmNTIgPSBMLmNpcmNsZU1hcmtlcigKICAgICAgICAgICAgICAgIFs0My42NDc5MjY3MDAwMDAwMDYsLTc5LjQxOTc0OTddLAogICAgICAgICAgICAgICAgewogICJidWJibGluZ01vdXNlRXZlbnRzIjogdHJ1ZSwKICAiY29sb3IiOiAiYmx1ZSIsCiAgImRhc2hBcnJheSI6IG51bGwsCiAgImRhc2hPZmZzZXQiOiBudWxsLAogICJmaWxsIjogdHJ1ZSwKICAiZmlsbENvbG9yIjogIiMzMTg2Y2MiLAogICJmaWxsT3BhY2l0eSI6IDAuNywKICAiZmlsbFJ1bGUiOiAiZXZlbm9kZCIsCiAgImxpbmVDYXAiOiAicm91bmQiLAogICJsaW5lSm9pbiI6ICJyb3VuZCIsCiAgIm9wYWNpdHkiOiAxLjAsCiAgInJhZGl1cyI6IDUsCiAgInN0cm9rZSI6IHRydWUsCiAgIndlaWdodCI6IDMKfQogICAgICAgICAgICAgICAgKS5hZGRUbyhtYXBfZDg3MzJjZTJjNjJjNGQ2YjhhZjc3YzFmNzFkZTFhNDQpOwogICAgICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfMGFkNjY5ZjgzYjE0NDg3NGFlZGY0YTQxNmVmNTZmNTIgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfNmQ4YmZmOTZkNGUyNDJmZmE5OGNjYzQ0OGNkYTI2YmIgPSAkKCc8ZGl2IGlkPSJodG1sXzZkOGJmZjk2ZDRlMjQyZmZhOThjY2M0NDhjZGEyNmJiIiBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij5MaXR0bGUgUG9ydHVnYWwgLyBUcmluaXR5LCBXZXN0IFRvcm9udG88L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzBhZDY2OWY4M2IxNDQ4NzRhZWRmNGE0MTZlZjU2ZjUyLnNldENvbnRlbnQoaHRtbF82ZDhiZmY5NmQ0ZTI0MmZmYTk4Y2NjNDQ4Y2RhMjZiYik7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl9lOWMyYzE0ODAwNjQ0NTY5OTM5OWQ3OWE1YTk2OGY1Mi5iaW5kUG9wdXAocG9wdXBfMGFkNjY5ZjgzYjE0NDg3NGFlZGY0YTQxNmVmNTZmNTIpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfNjExYjhiZmMyNDk4NGJhNmExNmExN2UwNmM4ZTJjNTAgPSBMLmNpcmNsZU1hcmtlcigKICAgICAgICAgICAgICAgIFs0My42Nzk1NTcxLC03OS4zNTIxODhdLAogICAgICAgICAgICAgICAgewogICJidWJibGluZ01vdXNlRXZlbnRzIjogdHJ1ZSwKICAiY29sb3IiOiAiYmx1ZSIsCiAgImRhc2hBcnJheSI6IG51bGwsCiAgImRhc2hPZmZzZXQiOiBudWxsLAogICJmaWxsIjogdHJ1ZSwKICAiZmlsbENvbG9yIjogIiMzMTg2Y2MiLAogICJmaWxsT3BhY2l0eSI6IDAuNywKICAiZmlsbFJ1bGUiOiAiZXZlbm9kZCIsCiAgImxpbmVDYXAiOiAicm91bmQiLAogICJsaW5lSm9pbiI6ICJyb3VuZCIsCiAgIm9wYWNpdHkiOiAxLjAsCiAgInJhZGl1cyI6IDUsCiAgInN0cm9rZSI6IHRydWUsCiAgIndlaWdodCI6IDMKfQogICAgICAgICAgICAgICAgKS5hZGRUbyhtYXBfZDg3MzJjZTJjNjJjNGQ2YjhhZjc3YzFmNzFkZTFhNDQpOwogICAgICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfNGM1ZTQwODJjMWIyNDNhMDg3M2MyZWJkMWZlMDBlNWUgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfN2JhNTkzZTg3NGJiNGM2M2FlZDNiMDU1NzBjZGQyZmUgPSAkKCc8ZGl2IGlkPSJodG1sXzdiYTU5M2U4NzRiYjRjNjNhZWQzYjA1NTcwY2RkMmZlIiBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij5UaGUgRGFuZm9ydGggV2VzdCAvIFJpdmVyZGFsZSwgRWFzdCBUb3JvbnRvPC9kaXY+JylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF80YzVlNDA4MmMxYjI0M2EwODczYzJlYmQxZmUwMGU1ZS5zZXRDb250ZW50KGh0bWxfN2JhNTkzZTg3NGJiNGM2M2FlZDNiMDU1NzBjZGQyZmUpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfNjExYjhiZmMyNDk4NGJhNmExNmExN2UwNmM4ZTJjNTAuYmluZFBvcHVwKHBvcHVwXzRjNWU0MDgyYzFiMjQzYTA4NzNjMmViZDFmZTAwZTVlKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyX2Y3NTY0M2Y0ZDE2NTRiZjc4NTk2OTQ1MWQ4ZjNhMDVhID0gTC5jaXJjbGVNYXJrZXIoCiAgICAgICAgICAgICAgICBbNDMuNjQ3MTc2OCwtNzkuMzgxNTc2NDAwMDAwMDFdLAogICAgICAgICAgICAgICAgewogICJidWJibGluZ01vdXNlRXZlbnRzIjogdHJ1ZSwKICAiY29sb3IiOiAiYmx1ZSIsCiAgImRhc2hBcnJheSI6IG51bGwsCiAgImRhc2hPZmZzZXQiOiBudWxsLAogICJmaWxsIjogdHJ1ZSwKICAiZmlsbENvbG9yIjogIiMzMTg2Y2MiLAogICJmaWxsT3BhY2l0eSI6IDAuNywKICAiZmlsbFJ1bGUiOiAiZXZlbm9kZCIsCiAgImxpbmVDYXAiOiAicm91bmQiLAogICJsaW5lSm9pbiI6ICJyb3VuZCIsCiAgIm9wYWNpdHkiOiAxLjAsCiAgInJhZGl1cyI6IDUsCiAgInN0cm9rZSI6IHRydWUsCiAgIndlaWdodCI6IDMKfQogICAgICAgICAgICAgICAgKS5hZGRUbyhtYXBfZDg3MzJjZTJjNjJjNGQ2YjhhZjc3YzFmNzFkZTFhNDQpOwogICAgICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfNTk3YWQ0ODAxY2YxNGRjY2JkMjVkMWM4OWUxZTY0ZTUgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfZmEzMDlhZmQ5MzQyNGFlNzg2OTk3MDgzYTczMWE3Y2QgPSAkKCc8ZGl2IGlkPSJodG1sX2ZhMzA5YWZkOTM0MjRhZTc4Njk5NzA4M2E3MzFhN2NkIiBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij5Ub3JvbnRvIERvbWluaW9uIENlbnRyZSAvIERlc2lnbiBFeGNoYW5nZSwgRG93bnRvd24gVG9yb250bzwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfNTk3YWQ0ODAxY2YxNGRjY2JkMjVkMWM4OWUxZTY0ZTUuc2V0Q29udGVudChodG1sX2ZhMzA5YWZkOTM0MjRhZTc4Njk5NzA4M2E3MzFhN2NkKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyX2Y3NTY0M2Y0ZDE2NTRiZjc4NTk2OTQ1MWQ4ZjNhMDVhLmJpbmRQb3B1cChwb3B1cF81OTdhZDQ4MDFjZjE0ZGNjYmQyNWQxYzg5ZTFlNjRlNSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl8xOGEwY2MzZTBjODM0NGEwODNhMTQ0Zjg4MDk0YjBjOSA9IEwuY2lyY2xlTWFya2VyKAogICAgICAgICAgICAgICAgWzQzLjYzNjg0NzIsLTc5LjQyODE5MTQwMDAwMDAyXSwKICAgICAgICAgICAgICAgIHsKICAiYnViYmxpbmdNb3VzZUV2ZW50cyI6IHRydWUsCiAgImNvbG9yIjogImJsdWUiLAogICJkYXNoQXJyYXkiOiBudWxsLAogICJkYXNoT2Zmc2V0IjogbnVsbCwKICAiZmlsbCI6IHRydWUsCiAgImZpbGxDb2xvciI6ICIjMzE4NmNjIiwKICAiZmlsbE9wYWNpdHkiOiAwLjcsCiAgImZpbGxSdWxlIjogImV2ZW5vZGQiLAogICJsaW5lQ2FwIjogInJvdW5kIiwKICAibGluZUpvaW4iOiAicm91bmQiLAogICJvcGFjaXR5IjogMS4wLAogICJyYWRpdXMiOiA1LAogICJzdHJva2UiOiB0cnVlLAogICJ3ZWlnaHQiOiAzCn0KICAgICAgICAgICAgICAgICkuYWRkVG8obWFwX2Q4NzMyY2UyYzYyYzRkNmI4YWY3N2MxZjcxZGUxYTQ0KTsKICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHBvcHVwX2UyM2IwYTBjMDNlZDQ3ZDU4MjdlOWJhYTI4Zjk4NGQ1ID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzExYTVhY2Y5MTlmYjRkMDc4M2Y2MzIxYzI4N2Y4NDgzID0gJCgnPGRpdiBpZD0iaHRtbF8xMWE1YWNmOTE5ZmI0ZDA3ODNmNjMyMWMyODdmODQ4MyIgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+QnJvY2t0b24gLyBQYXJrZGFsZSBWaWxsYWdlIC8gRXhoaWJpdGlvbiBQbGFjZSwgV2VzdCBUb3JvbnRvPC9kaXY+JylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF9lMjNiMGEwYzAzZWQ0N2Q1ODI3ZTliYWEyOGY5ODRkNS5zZXRDb250ZW50KGh0bWxfMTFhNWFjZjkxOWZiNGQwNzgzZjYzMjFjMjg3Zjg0ODMpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfMThhMGNjM2UwYzgzNDRhMDgzYTE0NGY4ODA5NGIwYzkuYmluZFBvcHVwKHBvcHVwX2UyM2IwYTBjMDNlZDQ3ZDU4MjdlOWJhYTI4Zjk4NGQ1KTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzYzYWJiZGFjMDEwZTQzNGE4NDNjMDU0ODgwZDYwODY1ID0gTC5jaXJjbGVNYXJrZXIoCiAgICAgICAgICAgICAgICBbNDMuNjY4OTk4NSwtNzkuMzE1NTcxNTk5OTk5OThdLAogICAgICAgICAgICAgICAgewogICJidWJibGluZ01vdXNlRXZlbnRzIjogdHJ1ZSwKICAiY29sb3IiOiAiYmx1ZSIsCiAgImRhc2hBcnJheSI6IG51bGwsCiAgImRhc2hPZmZzZXQiOiBudWxsLAogICJmaWxsIjogdHJ1ZSwKICAiZmlsbENvbG9yIjogIiMzMTg2Y2MiLAogICJmaWxsT3BhY2l0eSI6IDAuNywKICAiZmlsbFJ1bGUiOiAiZXZlbm9kZCIsCiAgImxpbmVDYXAiOiAicm91bmQiLAogICJsaW5lSm9pbiI6ICJyb3VuZCIsCiAgIm9wYWNpdHkiOiAxLjAsCiAgInJhZGl1cyI6IDUsCiAgInN0cm9rZSI6IHRydWUsCiAgIndlaWdodCI6IDMKfQogICAgICAgICAgICAgICAgKS5hZGRUbyhtYXBfZDg3MzJjZTJjNjJjNGQ2YjhhZjc3YzFmNzFkZTFhNDQpOwogICAgICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfZWFkMTA2NTA2MWMxNGY5ZGFkYTI0NzYzZWU2MmZlNjYgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfNTdiNTVkMmQxOWM3NDZhYmE1NDAyOTQxYzU3OTAyNTYgPSAkKCc8ZGl2IGlkPSJodG1sXzU3YjU1ZDJkMTljNzQ2YWJhNTQwMjk0MWM1NzkwMjU2IiBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij5JbmRpYSBCYXphYXIgLyBUaGUgQmVhY2hlcyBXZXN0LCBFYXN0IFRvcm9udG88L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwX2VhZDEwNjUwNjFjMTRmOWRhZGEyNDc2M2VlNjJmZTY2LnNldENvbnRlbnQoaHRtbF81N2I1NWQyZDE5Yzc0NmFiYTU0MDI5NDFjNTc5MDI1Nik7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl82M2FiYmRhYzAxMGU0MzRhODQzYzA1NDg4MGQ2MDg2NS5iaW5kUG9wdXAocG9wdXBfZWFkMTA2NTA2MWMxNGY5ZGFkYTI0NzYzZWU2MmZlNjYpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfYWUxOTliYjE3OTU0NGU1ZDgyMzZmMzZjM2I5YzhjNTcgPSBMLmNpcmNsZU1hcmtlcigKICAgICAgICAgICAgICAgIFs0My42NDgxOTg1LC03OS4zNzk4MTY5MDAwMDAwMV0sCiAgICAgICAgICAgICAgICB7CiAgImJ1YmJsaW5nTW91c2VFdmVudHMiOiB0cnVlLAogICJjb2xvciI6ICJibHVlIiwKICAiZGFzaEFycmF5IjogbnVsbCwKICAiZGFzaE9mZnNldCI6IG51bGwsCiAgImZpbGwiOiB0cnVlLAogICJmaWxsQ29sb3IiOiAiIzMxODZjYyIsCiAgImZpbGxPcGFjaXR5IjogMC43LAogICJmaWxsUnVsZSI6ICJldmVub2RkIiwKICAibGluZUNhcCI6ICJyb3VuZCIsCiAgImxpbmVKb2luIjogInJvdW5kIiwKICAib3BhY2l0eSI6IDEuMCwKICAicmFkaXVzIjogNSwKICAic3Ryb2tlIjogdHJ1ZSwKICAid2VpZ2h0IjogMwp9CiAgICAgICAgICAgICAgICApLmFkZFRvKG1hcF9kODczMmNlMmM2MmM0ZDZiOGFmNzdjMWY3MWRlMWE0NCk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF80M2NiZTEyOWQyM2I0NTY0YWZhN2IxNTY1MGMwMTc4NiA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF85NTJjMGIzZWQ4MWU0Zjk2Yjg2ZDZkNGQ3YzI0OWZiYiA9ICQoJzxkaXYgaWQ9Imh0bWxfOTUyYzBiM2VkODFlNGY5NmI4NmQ2ZDRkN2MyNDlmYmIiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPkNvbW1lcmNlIENvdXJ0IC8gVmljdG9yaWEgSG90ZWwsIERvd250b3duIFRvcm9udG88L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzQzY2JlMTI5ZDIzYjQ1NjRhZmE3YjE1NjUwYzAxNzg2LnNldENvbnRlbnQoaHRtbF85NTJjMGIzZWQ4MWU0Zjk2Yjg2ZDZkNGQ3YzI0OWZiYik7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl9hZTE5OWJiMTc5NTQ0ZTVkODIzNmYzNmMzYjljOGM1Ny5iaW5kUG9wdXAocG9wdXBfNDNjYmUxMjlkMjNiNDU2NGFmYTdiMTU2NTBjMDE3ODYpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfZmNlNzAyNTg2YzQ0NDRhZjlkODNjY2U1MDYxM2FlMWQgPSBMLmNpcmNsZU1hcmtlcigKICAgICAgICAgICAgICAgIFs0My42NTk1MjU1LC03OS4zNDA5MjNdLAogICAgICAgICAgICAgICAgewogICJidWJibGluZ01vdXNlRXZlbnRzIjogdHJ1ZSwKICAiY29sb3IiOiAiYmx1ZSIsCiAgImRhc2hBcnJheSI6IG51bGwsCiAgImRhc2hPZmZzZXQiOiBudWxsLAogICJmaWxsIjogdHJ1ZSwKICAiZmlsbENvbG9yIjogIiMzMTg2Y2MiLAogICJmaWxsT3BhY2l0eSI6IDAuNywKICAiZmlsbFJ1bGUiOiAiZXZlbm9kZCIsCiAgImxpbmVDYXAiOiAicm91bmQiLAogICJsaW5lSm9pbiI6ICJyb3VuZCIsCiAgIm9wYWNpdHkiOiAxLjAsCiAgInJhZGl1cyI6IDUsCiAgInN0cm9rZSI6IHRydWUsCiAgIndlaWdodCI6IDMKfQogICAgICAgICAgICAgICAgKS5hZGRUbyhtYXBfZDg3MzJjZTJjNjJjNGQ2YjhhZjc3YzFmNzFkZTFhNDQpOwogICAgICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfZDc3NjZhMTY5OWE2NDIyOGI3NGM5YTViZjFkNTBkMjYgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfOTE4ZTRhOTJjY2JmNDM1OGJmNGMyNTRkYjY1ODlkYzYgPSAkKCc8ZGl2IGlkPSJodG1sXzkxOGU0YTkyY2NiZjQzNThiZjRjMjU0ZGI2NTg5ZGM2IiBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij5TdHVkaW8gRGlzdHJpY3QsIEVhc3QgVG9yb250bzwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfZDc3NjZhMTY5OWE2NDIyOGI3NGM5YTViZjFkNTBkMjYuc2V0Q29udGVudChodG1sXzkxOGU0YTkyY2NiZjQzNThiZjRjMjU0ZGI2NTg5ZGM2KTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyX2ZjZTcwMjU4NmM0NDQ0YWY5ZDgzY2NlNTA2MTNhZTFkLmJpbmRQb3B1cChwb3B1cF9kNzc2NmExNjk5YTY0MjI4Yjc0YzlhNWJmMWQ1MGQyNik7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl8zOGEyNThmNTBiMTE0NjE1OTQzYzE1ZDQ1MGM2NGU2YSA9IEwuY2lyY2xlTWFya2VyKAogICAgICAgICAgICAgICAgWzQzLjcyODAyMDUsLTc5LjM4ODc5MDFdLAogICAgICAgICAgICAgICAgewogICJidWJibGluZ01vdXNlRXZlbnRzIjogdHJ1ZSwKICAiY29sb3IiOiAiYmx1ZSIsCiAgImRhc2hBcnJheSI6IG51bGwsCiAgImRhc2hPZmZzZXQiOiBudWxsLAogICJmaWxsIjogdHJ1ZSwKICAiZmlsbENvbG9yIjogIiMzMTg2Y2MiLAogICJmaWxsT3BhY2l0eSI6IDAuNywKICAiZmlsbFJ1bGUiOiAiZXZlbm9kZCIsCiAgImxpbmVDYXAiOiAicm91bmQiLAogICJsaW5lSm9pbiI6ICJyb3VuZCIsCiAgIm9wYWNpdHkiOiAxLjAsCiAgInJhZGl1cyI6IDUsCiAgInN0cm9rZSI6IHRydWUsCiAgIndlaWdodCI6IDMKfQogICAgICAgICAgICAgICAgKS5hZGRUbyhtYXBfZDg3MzJjZTJjNjJjNGQ2YjhhZjc3YzFmNzFkZTFhNDQpOwogICAgICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfNGMzNTgzMDJjNGFiNDRlYmFjOTZhMmU4NWNkZTM1MjggPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfMzQyMTQ0YTIyNzQ4NDQ0MWIwNDExNDBkNTM2MGY4ZGEgPSAkKCc8ZGl2IGlkPSJodG1sXzM0MjE0NGEyMjc0ODQ0NDFiMDQxMTQwZDUzNjBmOGRhIiBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij5MYXdyZW5jZSBQYXJrLCBDZW50cmFsIFRvcm9udG88L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzRjMzU4MzAyYzRhYjQ0ZWJhYzk2YTJlODVjZGUzNTI4LnNldENvbnRlbnQoaHRtbF8zNDIxNDRhMjI3NDg0NDQxYjA0MTE0MGQ1MzYwZjhkYSk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl8zOGEyNThmNTBiMTE0NjE1OTQzYzE1ZDQ1MGM2NGU2YS5iaW5kUG9wdXAocG9wdXBfNGMzNTgzMDJjNGFiNDRlYmFjOTZhMmU4NWNkZTM1MjgpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfMDlmMzNlNTQ5M2U1NGYxYTg1NGMwNDg2YWM1Nzc4ZWUgPSBMLmNpcmNsZU1hcmtlcigKICAgICAgICAgICAgICAgIFs0My43MTE2OTQ4LC03OS40MTY5MzU1OTk5OTk5OV0sCiAgICAgICAgICAgICAgICB7CiAgImJ1YmJsaW5nTW91c2VFdmVudHMiOiB0cnVlLAogICJjb2xvciI6ICJibHVlIiwKICAiZGFzaEFycmF5IjogbnVsbCwKICAiZGFzaE9mZnNldCI6IG51bGwsCiAgImZpbGwiOiB0cnVlLAogICJmaWxsQ29sb3IiOiAiIzMxODZjYyIsCiAgImZpbGxPcGFjaXR5IjogMC43LAogICJmaWxsUnVsZSI6ICJldmVub2RkIiwKICAibGluZUNhcCI6ICJyb3VuZCIsCiAgImxpbmVKb2luIjogInJvdW5kIiwKICAib3BhY2l0eSI6IDEuMCwKICAicmFkaXVzIjogNSwKICAic3Ryb2tlIjogdHJ1ZSwKICAid2VpZ2h0IjogMwp9CiAgICAgICAgICAgICAgICApLmFkZFRvKG1hcF9kODczMmNlMmM2MmM0ZDZiOGFmNzdjMWY3MWRlMWE0NCk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF83ODA1ZWI3ZmUxNzY0YTkxYWU4NmRjMTBhMWYzZjgyZiA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF84OTFkZjllMGI2YmQ0Y2ZkODc1OGI2MjNkN2M0ZTM5NCA9ICQoJzxkaXYgaWQ9Imh0bWxfODkxZGY5ZTBiNmJkNGNmZDg3NThiNjIzZDdjNGUzOTQiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPlJvc2VsYXduLCBDZW50cmFsIFRvcm9udG88L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzc4MDVlYjdmZTE3NjRhOTFhZTg2ZGMxMGExZjNmODJmLnNldENvbnRlbnQoaHRtbF84OTFkZjllMGI2YmQ0Y2ZkODc1OGI2MjNkN2M0ZTM5NCk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl8wOWYzM2U1NDkzZTU0ZjFhODU0YzA0ODZhYzU3NzhlZS5iaW5kUG9wdXAocG9wdXBfNzgwNWViN2ZlMTc2NGE5MWFlODZkYzEwYTFmM2Y4MmYpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfMjE1NjIwMjlmNzYyNGMxZmI1OTkyZjRlNTUxYTVhMjIgPSBMLmNpcmNsZU1hcmtlcigKICAgICAgICAgICAgICAgIFs0My43MTI3NTExLC03OS4zOTAxOTc1XSwKICAgICAgICAgICAgICAgIHsKICAiYnViYmxpbmdNb3VzZUV2ZW50cyI6IHRydWUsCiAgImNvbG9yIjogImJsdWUiLAogICJkYXNoQXJyYXkiOiBudWxsLAogICJkYXNoT2Zmc2V0IjogbnVsbCwKICAiZmlsbCI6IHRydWUsCiAgImZpbGxDb2xvciI6ICIjMzE4NmNjIiwKICAiZmlsbE9wYWNpdHkiOiAwLjcsCiAgImZpbGxSdWxlIjogImV2ZW5vZGQiLAogICJsaW5lQ2FwIjogInJvdW5kIiwKICAibGluZUpvaW4iOiAicm91bmQiLAogICJvcGFjaXR5IjogMS4wLAogICJyYWRpdXMiOiA1LAogICJzdHJva2UiOiB0cnVlLAogICJ3ZWlnaHQiOiAzCn0KICAgICAgICAgICAgICAgICkuYWRkVG8obWFwX2Q4NzMyY2UyYzYyYzRkNmI4YWY3N2MxZjcxZGUxYTQ0KTsKICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzAwN2Q1NWExOWNjNDQyMDY5MmI5NmNiZDRlMjQwZDYxID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzZjYWEzYTY3Mzg5YTQzZmFhNWYzZTQ3ODJhNDBjNTM5ID0gJCgnPGRpdiBpZD0iaHRtbF82Y2FhM2E2NzM4OWE0M2ZhYTVmM2U0NzgyYTQwYzUzOSIgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+RGF2aXN2aWxsZSBOb3J0aCwgQ2VudHJhbCBUb3JvbnRvPC9kaXY+JylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF8wMDdkNTVhMTljYzQ0MjA2OTJiOTZjYmQ0ZTI0MGQ2MS5zZXRDb250ZW50KGh0bWxfNmNhYTNhNjczODlhNDNmYWE1ZjNlNDc4MmE0MGM1MzkpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfMjE1NjIwMjlmNzYyNGMxZmI1OTkyZjRlNTUxYTVhMjIuYmluZFBvcHVwKHBvcHVwXzAwN2Q1NWExOWNjNDQyMDY5MmI5NmNiZDRlMjQwZDYxKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyX2EwZmMzZTQzOTA4NDQ5OGQ4YzI1ZmQyMzFlYzAyZDdlID0gTC5jaXJjbGVNYXJrZXIoCiAgICAgICAgICAgICAgICBbNDMuNjk2OTQ3NiwtNzkuNDExMzA3MjAwMDAwMDFdLAogICAgICAgICAgICAgICAgewogICJidWJibGluZ01vdXNlRXZlbnRzIjogdHJ1ZSwKICAiY29sb3IiOiAiYmx1ZSIsCiAgImRhc2hBcnJheSI6IG51bGwsCiAgImRhc2hPZmZzZXQiOiBudWxsLAogICJmaWxsIjogdHJ1ZSwKICAiZmlsbENvbG9yIjogIiMzMTg2Y2MiLAogICJmaWxsT3BhY2l0eSI6IDAuNywKICAiZmlsbFJ1bGUiOiAiZXZlbm9kZCIsCiAgImxpbmVDYXAiOiAicm91bmQiLAogICJsaW5lSm9pbiI6ICJyb3VuZCIsCiAgIm9wYWNpdHkiOiAxLjAsCiAgInJhZGl1cyI6IDUsCiAgInN0cm9rZSI6IHRydWUsCiAgIndlaWdodCI6IDMKfQogICAgICAgICAgICAgICAgKS5hZGRUbyhtYXBfZDg3MzJjZTJjNjJjNGQ2YjhhZjc3YzFmNzFkZTFhNDQpOwogICAgICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfYjRiYjljNTc1ZTJkNGQwMGJmNDNhNGRjMTliYWIxOTEgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfMDg0MjY2ZWFlMDdiNDE2Yjk3MTRiNWVhOTUxMmJkNDMgPSAkKCc8ZGl2IGlkPSJodG1sXzA4NDI2NmVhZTA3YjQxNmI5NzE0YjVlYTk1MTJiZDQzIiBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij5Gb3Jlc3QgSGlsbCBOb3J0aCAmYW1wOyBXZXN0LCBDZW50cmFsIFRvcm9udG88L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwX2I0YmI5YzU3NWUyZDRkMDBiZjQzYTRkYzE5YmFiMTkxLnNldENvbnRlbnQoaHRtbF8wODQyNjZlYWUwN2I0MTZiOTcxNGI1ZWE5NTEyYmQ0Myk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl9hMGZjM2U0MzkwODQ0OThkOGMyNWZkMjMxZWMwMmQ3ZS5iaW5kUG9wdXAocG9wdXBfYjRiYjljNTc1ZTJkNGQwMGJmNDNhNGRjMTliYWIxOTEpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfNWE1NmM1Y2VjNWY5NDdhNWFhYmI2ZmJhMWVjOWZlOTggPSBMLmNpcmNsZU1hcmtlcigKICAgICAgICAgICAgICAgIFs0My42NjE2MDgzLC03OS40NjQ3NjMyOTk5OTk5OV0sCiAgICAgICAgICAgICAgICB7CiAgImJ1YmJsaW5nTW91c2VFdmVudHMiOiB0cnVlLAogICJjb2xvciI6ICJibHVlIiwKICAiZGFzaEFycmF5IjogbnVsbCwKICAiZGFzaE9mZnNldCI6IG51bGwsCiAgImZpbGwiOiB0cnVlLAogICJmaWxsQ29sb3IiOiAiIzMxODZjYyIsCiAgImZpbGxPcGFjaXR5IjogMC43LAogICJmaWxsUnVsZSI6ICJldmVub2RkIiwKICAibGluZUNhcCI6ICJyb3VuZCIsCiAgImxpbmVKb2luIjogInJvdW5kIiwKICAib3BhY2l0eSI6IDEuMCwKICAicmFkaXVzIjogNSwKICAic3Ryb2tlIjogdHJ1ZSwKICAid2VpZ2h0IjogMwp9CiAgICAgICAgICAgICAgICApLmFkZFRvKG1hcF9kODczMmNlMmM2MmM0ZDZiOGFmNzdjMWY3MWRlMWE0NCk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9lNDhjYmMxMGY5ZGQ0MTRiYjFhMjlmNTRjODcwZDk3ZSA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF9jODZlYjVhZWVhMmI0OTc5YWQyY2FjZjM4OWYwYjc5YiA9ICQoJzxkaXYgaWQ9Imh0bWxfYzg2ZWI1YWVlYTJiNDk3OWFkMmNhY2YzODlmMGI3OWIiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPkhpZ2ggUGFyayAvIFRoZSBKdW5jdGlvbiBTb3V0aCwgV2VzdCBUb3JvbnRvPC9kaXY+JylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF9lNDhjYmMxMGY5ZGQ0MTRiYjFhMjlmNTRjODcwZDk3ZS5zZXRDb250ZW50KGh0bWxfYzg2ZWI1YWVlYTJiNDk3OWFkMmNhY2YzODlmMGI3OWIpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfNWE1NmM1Y2VjNWY5NDdhNWFhYmI2ZmJhMWVjOWZlOTguYmluZFBvcHVwKHBvcHVwX2U0OGNiYzEwZjlkZDQxNGJiMWEyOWY1NGM4NzBkOTdlKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzZjMzNkZWMzNjcwZDRlMTJhZGIyZDAxMmY1ZjQwNDAzID0gTC5jaXJjbGVNYXJrZXIoCiAgICAgICAgICAgICAgICBbNDMuNzE1MzgzNCwtNzkuNDA1Njc4NDAwMDAwMDFdLAogICAgICAgICAgICAgICAgewogICJidWJibGluZ01vdXNlRXZlbnRzIjogdHJ1ZSwKICAiY29sb3IiOiAiYmx1ZSIsCiAgImRhc2hBcnJheSI6IG51bGwsCiAgImRhc2hPZmZzZXQiOiBudWxsLAogICJmaWxsIjogdHJ1ZSwKICAiZmlsbENvbG9yIjogIiMzMTg2Y2MiLAogICJmaWxsT3BhY2l0eSI6IDAuNywKICAiZmlsbFJ1bGUiOiAiZXZlbm9kZCIsCiAgImxpbmVDYXAiOiAicm91bmQiLAogICJsaW5lSm9pbiI6ICJyb3VuZCIsCiAgIm9wYWNpdHkiOiAxLjAsCiAgInJhZGl1cyI6IDUsCiAgInN0cm9rZSI6IHRydWUsCiAgIndlaWdodCI6IDMKfQogICAgICAgICAgICAgICAgKS5hZGRUbyhtYXBfZDg3MzJjZTJjNjJjNGQ2YjhhZjc3YzFmNzFkZTFhNDQpOwogICAgICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfYTk0Nzk1NDViMzFjNDI5NmE4NDBhMWVkOWFiYTc1ZjQgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfOTQyNjg2N2JlNDg0NDZmMjkwMGJmYzdiMjFlYzMwMmIgPSAkKCc8ZGl2IGlkPSJodG1sXzk0MjY4NjdiZTQ4NDQ2ZjI5MDBiZmM3YjIxZWMzMDJiIiBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij5Ob3J0aCBUb3JvbnRvIFdlc3QsIENlbnRyYWwgVG9yb250bzwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfYTk0Nzk1NDViMzFjNDI5NmE4NDBhMWVkOWFiYTc1ZjQuc2V0Q29udGVudChodG1sXzk0MjY4NjdiZTQ4NDQ2ZjI5MDBiZmM3YjIxZWMzMDJiKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzZjMzNkZWMzNjcwZDRlMTJhZGIyZDAxMmY1ZjQwNDAzLmJpbmRQb3B1cChwb3B1cF9hOTQ3OTU0NWIzMWM0Mjk2YTg0MGExZWQ5YWJhNzVmNCk7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl8wN2FhNzgxMjA0Njc0MjAzODMxZTRlNGJmZjQ0Y2ZlNSA9IEwuY2lyY2xlTWFya2VyKAogICAgICAgICAgICAgICAgWzQzLjY3MjcwOTcsLTc5LjQwNTY3ODQwMDAwMDAxXSwKICAgICAgICAgICAgICAgIHsKICAiYnViYmxpbmdNb3VzZUV2ZW50cyI6IHRydWUsCiAgImNvbG9yIjogImJsdWUiLAogICJkYXNoQXJyYXkiOiBudWxsLAogICJkYXNoT2Zmc2V0IjogbnVsbCwKICAiZmlsbCI6IHRydWUsCiAgImZpbGxDb2xvciI6ICIjMzE4NmNjIiwKICAiZmlsbE9wYWNpdHkiOiAwLjcsCiAgImZpbGxSdWxlIjogImV2ZW5vZGQiLAogICJsaW5lQ2FwIjogInJvdW5kIiwKICAibGluZUpvaW4iOiAicm91bmQiLAogICJvcGFjaXR5IjogMS4wLAogICJyYWRpdXMiOiA1LAogICJzdHJva2UiOiB0cnVlLAogICJ3ZWlnaHQiOiAzCn0KICAgICAgICAgICAgICAgICkuYWRkVG8obWFwX2Q4NzMyY2UyYzYyYzRkNmI4YWY3N2MxZjcxZGUxYTQ0KTsKICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzA3YjBmZjZlNzc4YTRiODc5OWRkOTMxYTI0YTM2ODQ2ID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzUwM2IxZWRiMzIzMzQ3ZjI5MmRiZjkxZjcwNjcxOGYxID0gJCgnPGRpdiBpZD0iaHRtbF81MDNiMWVkYjMyMzM0N2YyOTJkYmY5MWY3MDY3MThmMSIgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+VGhlIEFubmV4IC8gTm9ydGggTWlkdG93biAvIFlvcmt2aWxsZSwgQ2VudHJhbCBUb3JvbnRvPC9kaXY+JylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF8wN2IwZmY2ZTc3OGE0Yjg3OTlkZDkzMWEyNGEzNjg0Ni5zZXRDb250ZW50KGh0bWxfNTAzYjFlZGIzMjMzNDdmMjkyZGJmOTFmNzA2NzE4ZjEpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfMDdhYTc4MTIwNDY3NDIwMzgzMWU0ZTRiZmY0NGNmZTUuYmluZFBvcHVwKHBvcHVwXzA3YjBmZjZlNzc4YTRiODc5OWRkOTMxYTI0YTM2ODQ2KTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzYzMWQ3NmNmZGVhYjQxZmRiMjAwMjc4OTVjYTM1ZDMyID0gTC5jaXJjbGVNYXJrZXIoCiAgICAgICAgICAgICAgICBbNDMuNjQ4OTU5NywtNzkuNDU2MzI1XSwKICAgICAgICAgICAgICAgIHsKICAiYnViYmxpbmdNb3VzZUV2ZW50cyI6IHRydWUsCiAgImNvbG9yIjogImJsdWUiLAogICJkYXNoQXJyYXkiOiBudWxsLAogICJkYXNoT2Zmc2V0IjogbnVsbCwKICAiZmlsbCI6IHRydWUsCiAgImZpbGxDb2xvciI6ICIjMzE4NmNjIiwKICAiZmlsbE9wYWNpdHkiOiAwLjcsCiAgImZpbGxSdWxlIjogImV2ZW5vZGQiLAogICJsaW5lQ2FwIjogInJvdW5kIiwKICAibGluZUpvaW4iOiAicm91bmQiLAogICJvcGFjaXR5IjogMS4wLAogICJyYWRpdXMiOiA1LAogICJzdHJva2UiOiB0cnVlLAogICJ3ZWlnaHQiOiAzCn0KICAgICAgICAgICAgICAgICkuYWRkVG8obWFwX2Q4NzMyY2UyYzYyYzRkNmI4YWY3N2MxZjcxZGUxYTQ0KTsKICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzFmN2NiMzRlYmRmNzQzZDA5MTJlNjc2MjQzM2E2MjUwID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzI4MTM3MDA2ODljODRhNjM4MDFhYWU2NTcxNDkyMDZhID0gJCgnPGRpdiBpZD0iaHRtbF8yODEzNzAwNjg5Yzg0YTYzODAxYWFlNjU3MTQ5MjA2YSIgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+UGFya2RhbGUgLyBSb25jZXN2YWxsZXMsIFdlc3QgVG9yb250bzwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfMWY3Y2IzNGViZGY3NDNkMDkxMmU2NzYyNDMzYTYyNTAuc2V0Q29udGVudChodG1sXzI4MTM3MDA2ODljODRhNjM4MDFhYWU2NTcxNDkyMDZhKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzYzMWQ3NmNmZGVhYjQxZmRiMjAwMjc4OTVjYTM1ZDMyLmJpbmRQb3B1cChwb3B1cF8xZjdjYjM0ZWJkZjc0M2QwOTEyZTY3NjI0MzNhNjI1MCk7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl80MjI1OGY4YWIxNGU0OTdiODAwYjAzZmEzMWZmNWM5MSA9IEwuY2lyY2xlTWFya2VyKAogICAgICAgICAgICAgICAgWzQzLjcwNDMyNDQsLTc5LjM4ODc5MDFdLAogICAgICAgICAgICAgICAgewogICJidWJibGluZ01vdXNlRXZlbnRzIjogdHJ1ZSwKICAiY29sb3IiOiAiYmx1ZSIsCiAgImRhc2hBcnJheSI6IG51bGwsCiAgImRhc2hPZmZzZXQiOiBudWxsLAogICJmaWxsIjogdHJ1ZSwKICAiZmlsbENvbG9yIjogIiMzMTg2Y2MiLAogICJmaWxsT3BhY2l0eSI6IDAuNywKICAiZmlsbFJ1bGUiOiAiZXZlbm9kZCIsCiAgImxpbmVDYXAiOiAicm91bmQiLAogICJsaW5lSm9pbiI6ICJyb3VuZCIsCiAgIm9wYWNpdHkiOiAxLjAsCiAgInJhZGl1cyI6IDUsCiAgInN0cm9rZSI6IHRydWUsCiAgIndlaWdodCI6IDMKfQogICAgICAgICAgICAgICAgKS5hZGRUbyhtYXBfZDg3MzJjZTJjNjJjNGQ2YjhhZjc3YzFmNzFkZTFhNDQpOwogICAgICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfZWM4MTg1MzE3MmIwNDgxNGJkZjJiNzMyYmVlZTgzZTUgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfZDM1ZDhjYmU1Y2M5NGJjOTkzMTQ5YTM2MzVhMGVmNTAgPSAkKCc8ZGl2IGlkPSJodG1sX2QzNWQ4Y2JlNWNjOTRiYzk5MzE0OWEzNjM1YTBlZjUwIiBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij5EYXZpc3ZpbGxlLCBDZW50cmFsIFRvcm9udG88L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwX2VjODE4NTMxNzJiMDQ4MTRiZGYyYjczMmJlZWU4M2U1LnNldENvbnRlbnQoaHRtbF9kMzVkOGNiZTVjYzk0YmM5OTMxNDlhMzYzNWEwZWY1MCk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl80MjI1OGY4YWIxNGU0OTdiODAwYjAzZmEzMWZmNWM5MS5iaW5kUG9wdXAocG9wdXBfZWM4MTg1MzE3MmIwNDgxNGJkZjJiNzMyYmVlZTgzZTUpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfYjI1OTA5Y2YyNmY1NGU1ZGJhY2Y3YTNlMzUxNzhiNDAgPSBMLmNpcmNsZU1hcmtlcigKICAgICAgICAgICAgICAgIFs0My42NjI2OTU2LC03OS40MDAwNDkzXSwKICAgICAgICAgICAgICAgIHsKICAiYnViYmxpbmdNb3VzZUV2ZW50cyI6IHRydWUsCiAgImNvbG9yIjogImJsdWUiLAogICJkYXNoQXJyYXkiOiBudWxsLAogICJkYXNoT2Zmc2V0IjogbnVsbCwKICAiZmlsbCI6IHRydWUsCiAgImZpbGxDb2xvciI6ICIjMzE4NmNjIiwKICAiZmlsbE9wYWNpdHkiOiAwLjcsCiAgImZpbGxSdWxlIjogImV2ZW5vZGQiLAogICJsaW5lQ2FwIjogInJvdW5kIiwKICAibGluZUpvaW4iOiAicm91bmQiLAogICJvcGFjaXR5IjogMS4wLAogICJyYWRpdXMiOiA1LAogICJzdHJva2UiOiB0cnVlLAogICJ3ZWlnaHQiOiAzCn0KICAgICAgICAgICAgICAgICkuYWRkVG8obWFwX2Q4NzMyY2UyYzYyYzRkNmI4YWY3N2MxZjcxZGUxYTQ0KTsKICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzZlMzdkMDkxZmNlYjQyNDBhNzZjNWMyYjg2MmRhZTJlID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzllODkxMTkzMDI2OTQyZjc4ZDZiYThkNzdhYWU5ZDA1ID0gJCgnPGRpdiBpZD0iaHRtbF85ZTg5MTE5MzAyNjk0MmY3OGQ2YmE4ZDc3YWFlOWQwNSIgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+VW5pdmVyc2l0eSBvZiBUb3JvbnRvIC8gSGFyYm9yZCwgRG93bnRvd24gVG9yb250bzwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfNmUzN2QwOTFmY2ViNDI0MGE3NmM1YzJiODYyZGFlMmUuc2V0Q29udGVudChodG1sXzllODkxMTkzMDI2OTQyZjc4ZDZiYThkNzdhYWU5ZDA1KTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyX2IyNTkwOWNmMjZmNTRlNWRiYWNmN2EzZTM1MTc4YjQwLmJpbmRQb3B1cChwb3B1cF82ZTM3ZDA5MWZjZWI0MjQwYTc2YzVjMmI4NjJkYWUyZSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl9kZmJkNzBmZGFhMGE0ZDA1YWYxODk3YjFmZjQ5NjhjYyA9IEwuY2lyY2xlTWFya2VyKAogICAgICAgICAgICAgICAgWzQzLjY1MTU3MDYsLTc5LjQ4NDQ0OTldLAogICAgICAgICAgICAgICAgewogICJidWJibGluZ01vdXNlRXZlbnRzIjogdHJ1ZSwKICAiY29sb3IiOiAiYmx1ZSIsCiAgImRhc2hBcnJheSI6IG51bGwsCiAgImRhc2hPZmZzZXQiOiBudWxsLAogICJmaWxsIjogdHJ1ZSwKICAiZmlsbENvbG9yIjogIiMzMTg2Y2MiLAogICJmaWxsT3BhY2l0eSI6IDAuNywKICAiZmlsbFJ1bGUiOiAiZXZlbm9kZCIsCiAgImxpbmVDYXAiOiAicm91bmQiLAogICJsaW5lSm9pbiI6ICJyb3VuZCIsCiAgIm9wYWNpdHkiOiAxLjAsCiAgInJhZGl1cyI6IDUsCiAgInN0cm9rZSI6IHRydWUsCiAgIndlaWdodCI6IDMKfQogICAgICAgICAgICAgICAgKS5hZGRUbyhtYXBfZDg3MzJjZTJjNjJjNGQ2YjhhZjc3YzFmNzFkZTFhNDQpOwogICAgICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfMGJlZjczODEzMmFlNDVlYWIyZjg0ZWFlMThkZTU0ZWMgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfODRhY2I0MjMxYTZlNDE4OWJjOGE1OTc2OWQ3NDljMTIgPSAkKCc8ZGl2IGlkPSJodG1sXzg0YWNiNDIzMWE2ZTQxODliYzhhNTk3NjlkNzQ5YzEyIiBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij5SdW5ueW1lZGUgLyBTd2Fuc2VhLCBXZXN0IFRvcm9udG88L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzBiZWY3MzgxMzJhZTQ1ZWFiMmY4NGVhZTE4ZGU1NGVjLnNldENvbnRlbnQoaHRtbF84NGFjYjQyMzFhNmU0MTg5YmM4YTU5NzY5ZDc0OWMxMik7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl9kZmJkNzBmZGFhMGE0ZDA1YWYxODk3YjFmZjQ5NjhjYy5iaW5kUG9wdXAocG9wdXBfMGJlZjczODEzMmFlNDVlYWIyZjg0ZWFlMThkZTU0ZWMpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfN2ViMmQ4ZDY2OWM4NDMzM2IwMzJiNTM0YTQzM2VhNjMgPSBMLmNpcmNsZU1hcmtlcigKICAgICAgICAgICAgICAgIFs0My42ODk1NzQzLC03OS4zODMxNTk5MDAwMDAwMV0sCiAgICAgICAgICAgICAgICB7CiAgImJ1YmJsaW5nTW91c2VFdmVudHMiOiB0cnVlLAogICJjb2xvciI6ICJibHVlIiwKICAiZGFzaEFycmF5IjogbnVsbCwKICAiZGFzaE9mZnNldCI6IG51bGwsCiAgImZpbGwiOiB0cnVlLAogICJmaWxsQ29sb3IiOiAiIzMxODZjYyIsCiAgImZpbGxPcGFjaXR5IjogMC43LAogICJmaWxsUnVsZSI6ICJldmVub2RkIiwKICAibGluZUNhcCI6ICJyb3VuZCIsCiAgImxpbmVKb2luIjogInJvdW5kIiwKICAib3BhY2l0eSI6IDEuMCwKICAicmFkaXVzIjogNSwKICAic3Ryb2tlIjogdHJ1ZSwKICAid2VpZ2h0IjogMwp9CiAgICAgICAgICAgICAgICApLmFkZFRvKG1hcF9kODczMmNlMmM2MmM0ZDZiOGFmNzdjMWY3MWRlMWE0NCk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF82N2MyZjQ5MTMyZWY0NGIwOTg3MmQ4YTNiMmFmMWU4YiA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF9mZjBkMGQzZWY0ODc0NzZhOTUyZDM3YWYzMmIyMTIwNSA9ICQoJzxkaXYgaWQ9Imh0bWxfZmYwZDBkM2VmNDg3NDc2YTk1MmQzN2FmMzJiMjEyMDUiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPk1vb3JlIFBhcmsgLyBTdW1tZXJoaWxsIEVhc3QsIENlbnRyYWwgVG9yb250bzwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfNjdjMmY0OTEzMmVmNDRiMDk4NzJkOGEzYjJhZjFlOGIuc2V0Q29udGVudChodG1sX2ZmMGQwZDNlZjQ4NzQ3NmE5NTJkMzdhZjMyYjIxMjA1KTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzdlYjJkOGQ2NjljODQzMzNiMDMyYjUzNGE0MzNlYTYzLmJpbmRQb3B1cChwb3B1cF82N2MyZjQ5MTMyZWY0NGIwOTg3MmQ4YTNiMmFmMWU4Yik7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl9mYTFkMDUxOTk3NjA0ZTUxOThiY2Q3YWNjNTc4ZmVkMSA9IEwuY2lyY2xlTWFya2VyKAogICAgICAgICAgICAgICAgWzQzLjY1MzIwNTcsLTc5LjQwMDA0OTNdLAogICAgICAgICAgICAgICAgewogICJidWJibGluZ01vdXNlRXZlbnRzIjogdHJ1ZSwKICAiY29sb3IiOiAiYmx1ZSIsCiAgImRhc2hBcnJheSI6IG51bGwsCiAgImRhc2hPZmZzZXQiOiBudWxsLAogICJmaWxsIjogdHJ1ZSwKICAiZmlsbENvbG9yIjogIiMzMTg2Y2MiLAogICJmaWxsT3BhY2l0eSI6IDAuNywKICAiZmlsbFJ1bGUiOiAiZXZlbm9kZCIsCiAgImxpbmVDYXAiOiAicm91bmQiLAogICJsaW5lSm9pbiI6ICJyb3VuZCIsCiAgIm9wYWNpdHkiOiAxLjAsCiAgInJhZGl1cyI6IDUsCiAgInN0cm9rZSI6IHRydWUsCiAgIndlaWdodCI6IDMKfQogICAgICAgICAgICAgICAgKS5hZGRUbyhtYXBfZDg3MzJjZTJjNjJjNGQ2YjhhZjc3YzFmNzFkZTFhNDQpOwogICAgICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfNmU5YWQ2OGVkMjFmNDdkMDg5MTI0MDcyNzE2ODBhOTIgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfNWUwOGI0ZTc2NTRiNGZmOWFmMjZhMGZiMTk3NjQ0ZTEgPSAkKCc8ZGl2IGlkPSJodG1sXzVlMDhiNGU3NjU0YjRmZjlhZjI2YTBmYjE5NzY0NGUxIiBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij5LZW5zaW5ndG9uIE1hcmtldCAvIENoaW5hdG93biAvIEdyYW5nZSBQYXJrLCBEb3dudG93biBUb3JvbnRvPC9kaXY+JylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF82ZTlhZDY4ZWQyMWY0N2QwODkxMjQwNzI3MTY4MGE5Mi5zZXRDb250ZW50KGh0bWxfNWUwOGI0ZTc2NTRiNGZmOWFmMjZhMGZiMTk3NjQ0ZTEpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfZmExZDA1MTk5NzYwNGU1MTk4YmNkN2FjYzU3OGZlZDEuYmluZFBvcHVwKHBvcHVwXzZlOWFkNjhlZDIxZjQ3ZDA4OTEyNDA3MjcxNjgwYTkyKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyX2ViZTk4YzZmNjdjMjRiOWJhZmIwZmFmZGIzMjU5YWJmID0gTC5jaXJjbGVNYXJrZXIoCiAgICAgICAgICAgICAgICBbNDMuNjg2NDEyMjk5OTk5OTksLTc5LjQwMDA0OTNdLAogICAgICAgICAgICAgICAgewogICJidWJibGluZ01vdXNlRXZlbnRzIjogdHJ1ZSwKICAiY29sb3IiOiAiYmx1ZSIsCiAgImRhc2hBcnJheSI6IG51bGwsCiAgImRhc2hPZmZzZXQiOiBudWxsLAogICJmaWxsIjogdHJ1ZSwKICAiZmlsbENvbG9yIjogIiMzMTg2Y2MiLAogICJmaWxsT3BhY2l0eSI6IDAuNywKICAiZmlsbFJ1bGUiOiAiZXZlbm9kZCIsCiAgImxpbmVDYXAiOiAicm91bmQiLAogICJsaW5lSm9pbiI6ICJyb3VuZCIsCiAgIm9wYWNpdHkiOiAxLjAsCiAgInJhZGl1cyI6IDUsCiAgInN0cm9rZSI6IHRydWUsCiAgIndlaWdodCI6IDMKfQogICAgICAgICAgICAgICAgKS5hZGRUbyhtYXBfZDg3MzJjZTJjNjJjNGQ2YjhhZjc3YzFmNzFkZTFhNDQpOwogICAgICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfYjYzYzE2ZDU1YjY0NGFiZDhjNGRmNGMwYmQ3MWVkODQgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfMjQxNDBhNTc4ZTNjNDc5YWE0NzdmZDVhYWJhODBlYjAgPSAkKCc8ZGl2IGlkPSJodG1sXzI0MTQwYTU3OGUzYzQ3OWFhNDc3ZmQ1YWFiYTgwZWIwIiBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij5TdW1tZXJoaWxsIFdlc3QgLyBSYXRobmVsbHkgLyBTb3V0aCBIaWxsIC8gRm9yZXN0IEhpbGwgU0UgLyBEZWVyIFBhcmssIENlbnRyYWwgVG9yb250bzwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfYjYzYzE2ZDU1YjY0NGFiZDhjNGRmNGMwYmQ3MWVkODQuc2V0Q29udGVudChodG1sXzI0MTQwYTU3OGUzYzQ3OWFhNDc3ZmQ1YWFiYTgwZWIwKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyX2ViZTk4YzZmNjdjMjRiOWJhZmIwZmFmZGIzMjU5YWJmLmJpbmRQb3B1cChwb3B1cF9iNjNjMTZkNTViNjQ0YWJkOGM0ZGY0YzBiZDcxZWQ4NCk7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl83MmVkZTIyYWFlNTI0NTM3ODIzYjc3YTNlNWQ1ZjViMSA9IEwuY2lyY2xlTWFya2VyKAogICAgICAgICAgICAgICAgWzQzLjYyODk0NjcsLTc5LjM5NDQxOTldLAogICAgICAgICAgICAgICAgewogICJidWJibGluZ01vdXNlRXZlbnRzIjogdHJ1ZSwKICAiY29sb3IiOiAiYmx1ZSIsCiAgImRhc2hBcnJheSI6IG51bGwsCiAgImRhc2hPZmZzZXQiOiBudWxsLAogICJmaWxsIjogdHJ1ZSwKICAiZmlsbENvbG9yIjogIiMzMTg2Y2MiLAogICJmaWxsT3BhY2l0eSI6IDAuNywKICAiZmlsbFJ1bGUiOiAiZXZlbm9kZCIsCiAgImxpbmVDYXAiOiAicm91bmQiLAogICJsaW5lSm9pbiI6ICJyb3VuZCIsCiAgIm9wYWNpdHkiOiAxLjAsCiAgInJhZGl1cyI6IDUsCiAgInN0cm9rZSI6IHRydWUsCiAgIndlaWdodCI6IDMKfQogICAgICAgICAgICAgICAgKS5hZGRUbyhtYXBfZDg3MzJjZTJjNjJjNGQ2YjhhZjc3YzFmNzFkZTFhNDQpOwogICAgICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfOGFkNDllNjk0YjA1NDAwMzljNTVlYjExOGJhNWE1OTAgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfZWVhYWYyMzVlY2JhNGRiZWJkOWQ4OTM1ZGRhMjAxZjggPSAkKCc8ZGl2IGlkPSJodG1sX2VlYWFmMjM1ZWNiYTRkYmViZDlkODkzNWRkYTIwMWY4IiBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij5DTiBUb3dlciAvIEtpbmcgYW5kIFNwYWRpbmEgLyBSYWlsd2F5IExhbmRzIC8gSGFyYm91cmZyb250IFdlc3QgLyBCYXRodXJzdCAgUXVheSAvIFNvdXRoIE5pYWdhcmEgLyBJc2xhbmQgYWlycG9ydCwgRG93bnRvd24gVG9yb250bzwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfOGFkNDllNjk0YjA1NDAwMzljNTVlYjExOGJhNWE1OTAuc2V0Q29udGVudChodG1sX2VlYWFmMjM1ZWNiYTRkYmViZDlkODkzNWRkYTIwMWY4KTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzcyZWRlMjJhYWU1MjQ1Mzc4MjNiNzdhM2U1ZDVmNWIxLmJpbmRQb3B1cChwb3B1cF84YWQ0OWU2OTRiMDU0MDAzOWM1NWViMTE4YmE1YTU5MCk7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl9kZmVjNjhhZjQ3OWM0YzI5OWVkMTdjZGUwMDMzYTFiNSA9IEwuY2lyY2xlTWFya2VyKAogICAgICAgICAgICAgICAgWzQzLjY3OTU2MjYsLTc5LjM3NzUyOTQwMDAwMDAxXSwKICAgICAgICAgICAgICAgIHsKICAiYnViYmxpbmdNb3VzZUV2ZW50cyI6IHRydWUsCiAgImNvbG9yIjogImJsdWUiLAogICJkYXNoQXJyYXkiOiBudWxsLAogICJkYXNoT2Zmc2V0IjogbnVsbCwKICAiZmlsbCI6IHRydWUsCiAgImZpbGxDb2xvciI6ICIjMzE4NmNjIiwKICAiZmlsbE9wYWNpdHkiOiAwLjcsCiAgImZpbGxSdWxlIjogImV2ZW5vZGQiLAogICJsaW5lQ2FwIjogInJvdW5kIiwKICAibGluZUpvaW4iOiAicm91bmQiLAogICJvcGFjaXR5IjogMS4wLAogICJyYWRpdXMiOiA1LAogICJzdHJva2UiOiB0cnVlLAogICJ3ZWlnaHQiOiAzCn0KICAgICAgICAgICAgICAgICkuYWRkVG8obWFwX2Q4NzMyY2UyYzYyYzRkNmI4YWY3N2MxZjcxZGUxYTQ0KTsKICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzM2YjMwODc3NmY5NTQ5NjI5MmM0MTE2MDAyNDJmNTcyID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sX2IxYWM3MGNkNjI3ZjQyNDJhNGVjZTg5MTI1MzEzMzhkID0gJCgnPGRpdiBpZD0iaHRtbF9iMWFjNzBjZDYyN2Y0MjQyYTRlY2U4OTEyNTMxMzM4ZCIgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+Um9zZWRhbGUsIERvd250b3duIFRvcm9udG88L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwXzM2YjMwODc3NmY5NTQ5NjI5MmM0MTE2MDAyNDJmNTcyLnNldENvbnRlbnQoaHRtbF9iMWFjNzBjZDYyN2Y0MjQyYTRlY2U4OTEyNTMxMzM4ZCk7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl9kZmVjNjhhZjQ3OWM0YzI5OWVkMTdjZGUwMDMzYTFiNS5iaW5kUG9wdXAocG9wdXBfMzZiMzA4Nzc2Zjk1NDk2MjkyYzQxMTYwMDI0MmY1NzIpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfMGYwNThkN2Q3OTdlNGUxYzk2MzdiNTZjZTM2NjYzYzYgPSBMLmNpcmNsZU1hcmtlcigKICAgICAgICAgICAgICAgIFs0My42NDY0MzUyLC03OS4zNzQ4NDU5OTk5OTk5OV0sCiAgICAgICAgICAgICAgICB7CiAgImJ1YmJsaW5nTW91c2VFdmVudHMiOiB0cnVlLAogICJjb2xvciI6ICJibHVlIiwKICAiZGFzaEFycmF5IjogbnVsbCwKICAiZGFzaE9mZnNldCI6IG51bGwsCiAgImZpbGwiOiB0cnVlLAogICJmaWxsQ29sb3IiOiAiIzMxODZjYyIsCiAgImZpbGxPcGFjaXR5IjogMC43LAogICJmaWxsUnVsZSI6ICJldmVub2RkIiwKICAibGluZUNhcCI6ICJyb3VuZCIsCiAgImxpbmVKb2luIjogInJvdW5kIiwKICAib3BhY2l0eSI6IDEuMCwKICAicmFkaXVzIjogNSwKICAic3Ryb2tlIjogdHJ1ZSwKICAid2VpZ2h0IjogMwp9CiAgICAgICAgICAgICAgICApLmFkZFRvKG1hcF9kODczMmNlMmM2MmM0ZDZiOGFmNzdjMWY3MWRlMWE0NCk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9mZTVhZDk4M2QyNzg0OGZmOWVlMjllY2JkYTNkYzgyNyA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF84NWZlZjNmZjkxNmU0NWFmYjE4Y2VhMDFjM2EwYzJiZCA9ICQoJzxkaXYgaWQ9Imh0bWxfODVmZWYzZmY5MTZlNDVhZmIxOGNlYTAxYzNhMGMyYmQiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPlN0biBBIFBPIEJveGVzLCBEb3dudG93biBUb3JvbnRvPC9kaXY+JylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF9mZTVhZDk4M2QyNzg0OGZmOWVlMjllY2JkYTNkYzgyNy5zZXRDb250ZW50KGh0bWxfODVmZWYzZmY5MTZlNDVhZmIxOGNlYTAxYzNhMGMyYmQpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfMGYwNThkN2Q3OTdlNGUxYzk2MzdiNTZjZTM2NjYzYzYuYmluZFBvcHVwKHBvcHVwX2ZlNWFkOTgzZDI3ODQ4ZmY5ZWUyOWVjYmRhM2RjODI3KTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzZkMjViOGRmZjk2OTQwZDg4ZTVmNmMzMTFlZDE5OWY4ID0gTC5jaXJjbGVNYXJrZXIoCiAgICAgICAgICAgICAgICBbNDMuNjY3OTY3LC03OS4zNjc2NzUzXSwKICAgICAgICAgICAgICAgIHsKICAiYnViYmxpbmdNb3VzZUV2ZW50cyI6IHRydWUsCiAgImNvbG9yIjogImJsdWUiLAogICJkYXNoQXJyYXkiOiBudWxsLAogICJkYXNoT2Zmc2V0IjogbnVsbCwKICAiZmlsbCI6IHRydWUsCiAgImZpbGxDb2xvciI6ICIjMzE4NmNjIiwKICAiZmlsbE9wYWNpdHkiOiAwLjcsCiAgImZpbGxSdWxlIjogImV2ZW5vZGQiLAogICJsaW5lQ2FwIjogInJvdW5kIiwKICAibGluZUpvaW4iOiAicm91bmQiLAogICJvcGFjaXR5IjogMS4wLAogICJyYWRpdXMiOiA1LAogICJzdHJva2UiOiB0cnVlLAogICJ3ZWlnaHQiOiAzCn0KICAgICAgICAgICAgICAgICkuYWRkVG8obWFwX2Q4NzMyY2UyYzYyYzRkNmI4YWY3N2MxZjcxZGUxYTQ0KTsKICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHBvcHVwXzU3ZDBiYmU1M2I4YTQwNTNiZjc4YTQ2MzY4N2VhOTk1ID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sXzQyY2Q2YzcyZTQ2OTQ4YzdhZDc0N2E5NzQ0Zjg0YjdhID0gJCgnPGRpdiBpZD0iaHRtbF80MmNkNmM3MmU0Njk0OGM3YWQ3NDdhOTc0NGY4NGI3YSIgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+U3QuIEphbWVzIFRvd24gLyBDYWJiYWdldG93biwgRG93bnRvd24gVG9yb250bzwvZGl2PicpWzBdOwogICAgICAgICAgICAgICAgcG9wdXBfNTdkMGJiZTUzYjhhNDA1M2JmNzhhNDYzNjg3ZWE5OTUuc2V0Q29udGVudChodG1sXzQyY2Q2YzcyZTQ2OTQ4YzdhZDc0N2E5NzQ0Zjg0YjdhKTsKICAgICAgICAgICAgCgogICAgICAgICAgICBjaXJjbGVfbWFya2VyXzZkMjViOGRmZjk2OTQwZDg4ZTVmNmMzMTFlZDE5OWY4LmJpbmRQb3B1cChwb3B1cF81N2QwYmJlNTNiOGE0MDUzYmY3OGE0NjM2ODdlYTk5NSk7CgogICAgICAgICAgICAKICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgY2lyY2xlX21hcmtlcl9kYmZlNGRkNzcxZDI0N2JiYmVjZDlmZDRkMGZkMzk2NCA9IEwuY2lyY2xlTWFya2VyKAogICAgICAgICAgICAgICAgWzQzLjY0ODQyOTIsLTc5LjM4MjI4MDJdLAogICAgICAgICAgICAgICAgewogICJidWJibGluZ01vdXNlRXZlbnRzIjogdHJ1ZSwKICAiY29sb3IiOiAiYmx1ZSIsCiAgImRhc2hBcnJheSI6IG51bGwsCiAgImRhc2hPZmZzZXQiOiBudWxsLAogICJmaWxsIjogdHJ1ZSwKICAiZmlsbENvbG9yIjogIiMzMTg2Y2MiLAogICJmaWxsT3BhY2l0eSI6IDAuNywKICAiZmlsbFJ1bGUiOiAiZXZlbm9kZCIsCiAgImxpbmVDYXAiOiAicm91bmQiLAogICJsaW5lSm9pbiI6ICJyb3VuZCIsCiAgIm9wYWNpdHkiOiAxLjAsCiAgInJhZGl1cyI6IDUsCiAgInN0cm9rZSI6IHRydWUsCiAgIndlaWdodCI6IDMKfQogICAgICAgICAgICAgICAgKS5hZGRUbyhtYXBfZDg3MzJjZTJjNjJjNGQ2YjhhZjc3YzFmNzFkZTFhNDQpOwogICAgICAgICAgICAKICAgIAogICAgICAgICAgICB2YXIgcG9wdXBfZThmMzkwODJhYjQ3NGEzYzk2ZGMyYTZjYzAwNzEwZDcgPSBMLnBvcHVwKHttYXhXaWR0aDogJzMwMCd9KTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGh0bWxfODhiNDI5M2JjMzQ4NDU0NWI2NDYxOTFmOTNiMjM3NmYgPSAkKCc8ZGl2IGlkPSJodG1sXzg4YjQyOTNiYzM0ODQ1NDViNjQ2MTkxZjkzYjIzNzZmIiBzdHlsZT0id2lkdGg6IDEwMC4wJTsgaGVpZ2h0OiAxMDAuMCU7Ij5GaXJzdCBDYW5hZGlhbiBQbGFjZSAvIFVuZGVyZ3JvdW5kIGNpdHksIERvd250b3duIFRvcm9udG88L2Rpdj4nKVswXTsKICAgICAgICAgICAgICAgIHBvcHVwX2U4ZjM5MDgyYWI0NzRhM2M5NmRjMmE2Y2MwMDcxMGQ3LnNldENvbnRlbnQoaHRtbF84OGI0MjkzYmMzNDg0NTQ1YjY0NjE5MWY5M2IyMzc2Zik7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgY2lyY2xlX21hcmtlcl9kYmZlNGRkNzcxZDI0N2JiYmVjZDlmZDRkMGZkMzk2NC5iaW5kUG9wdXAocG9wdXBfZThmMzkwODJhYjQ3NGEzYzk2ZGMyYTZjYzAwNzEwZDcpOwoKICAgICAgICAgICAgCiAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIGNpcmNsZV9tYXJrZXJfZWU2ZjQxZDQ2Mzk4NDAyOThiZGFmODBiMmU1ZjVjNTQgPSBMLmNpcmNsZU1hcmtlcigKICAgICAgICAgICAgICAgIFs0My42NjU4NTk5LC03OS4zODMxNTk5MDAwMDAwMV0sCiAgICAgICAgICAgICAgICB7CiAgImJ1YmJsaW5nTW91c2VFdmVudHMiOiB0cnVlLAogICJjb2xvciI6ICJibHVlIiwKICAiZGFzaEFycmF5IjogbnVsbCwKICAiZGFzaE9mZnNldCI6IG51bGwsCiAgImZpbGwiOiB0cnVlLAogICJmaWxsQ29sb3IiOiAiIzMxODZjYyIsCiAgImZpbGxPcGFjaXR5IjogMC43LAogICJmaWxsUnVsZSI6ICJldmVub2RkIiwKICAibGluZUNhcCI6ICJyb3VuZCIsCiAgImxpbmVKb2luIjogInJvdW5kIiwKICAib3BhY2l0eSI6IDEuMCwKICAicmFkaXVzIjogNSwKICAic3Ryb2tlIjogdHJ1ZSwKICAid2VpZ2h0IjogMwp9CiAgICAgICAgICAgICAgICApLmFkZFRvKG1hcF9kODczMmNlMmM2MmM0ZDZiOGFmNzdjMWY3MWRlMWE0NCk7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF9kNzRhNTJjNDQ3M2Y0MWE5OTU0NTU3ZmFlZjFkNTJkMiA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF81NzVlMGI2NDFhYjQ0YTAyYjc1NzZhMGViOTMxM2JjYyA9ICQoJzxkaXYgaWQ9Imh0bWxfNTc1ZTBiNjQxYWI0NGEwMmI3NTc2YTBlYjkzMTNiY2MiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPkNodXJjaCBhbmQgV2VsbGVzbGV5LCBEb3dudG93biBUb3JvbnRvPC9kaXY+JylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF9kNzRhNTJjNDQ3M2Y0MWE5OTU0NTU3ZmFlZjFkNTJkMi5zZXRDb250ZW50KGh0bWxfNTc1ZTBiNjQxYWI0NGEwMmI3NTc2YTBlYjkzMTNiY2MpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfZWU2ZjQxZDQ2Mzk4NDAyOThiZGFmODBiMmU1ZjVjNTQuYmluZFBvcHVwKHBvcHVwX2Q3NGE1MmM0NDczZjQxYTk5NTQ1NTdmYWVmMWQ1MmQyKTsKCiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBjaXJjbGVfbWFya2VyXzQwZjU5YjI1MmUwMzQ0MjU4ZDIxYjBjNjk3N2MwYWE5ID0gTC5jaXJjbGVNYXJrZXIoCiAgICAgICAgICAgICAgICBbNDMuNjYyNzQzOSwtNzkuMzIxNTU4XSwKICAgICAgICAgICAgICAgIHsKICAiYnViYmxpbmdNb3VzZUV2ZW50cyI6IHRydWUsCiAgImNvbG9yIjogImJsdWUiLAogICJkYXNoQXJyYXkiOiBudWxsLAogICJkYXNoT2Zmc2V0IjogbnVsbCwKICAiZmlsbCI6IHRydWUsCiAgImZpbGxDb2xvciI6ICIjMzE4NmNjIiwKICAiZmlsbE9wYWNpdHkiOiAwLjcsCiAgImZpbGxSdWxlIjogImV2ZW5vZGQiLAogICJsaW5lQ2FwIjogInJvdW5kIiwKICAibGluZUpvaW4iOiAicm91bmQiLAogICJvcGFjaXR5IjogMS4wLAogICJyYWRpdXMiOiA1LAogICJzdHJva2UiOiB0cnVlLAogICJ3ZWlnaHQiOiAzCn0KICAgICAgICAgICAgICAgICkuYWRkVG8obWFwX2Q4NzMyY2UyYzYyYzRkNmI4YWY3N2MxZjcxZGUxYTQ0KTsKICAgICAgICAgICAgCiAgICAKICAgICAgICAgICAgdmFyIHBvcHVwX2Y5YjM0MzNkZmVmYjQ0MTBhOGVjNWIzYTVhNzQ3MzU5ID0gTC5wb3B1cCh7bWF4V2lkdGg6ICczMDAnfSk7CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIHZhciBodG1sX2ZjNTcyYmI5ZTQ2MDQ0NDM4ZGU4NTRjNDc1YjYxNGUxID0gJCgnPGRpdiBpZD0iaHRtbF9mYzU3MmJiOWU0NjA0NDQzOGRlODU0YzQ3NWI2MTRlMSIgc3R5bGU9IndpZHRoOiAxMDAuMCU7IGhlaWdodDogMTAwLjAlOyI+QnVzaW5lc3MgcmVwbHkgbWFpbCBQcm9jZXNzaW5nIENlbnRyRSwgRWFzdCBUb3JvbnRvPC9kaXY+JylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF9mOWIzNDMzZGZlZmI0NDEwYThlYzViM2E1YTc0NzM1OS5zZXRDb250ZW50KGh0bWxfZmM1NzJiYjllNDYwNDQ0MzhkZTg1NGM0NzViNjE0ZTEpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9tYXJrZXJfNDBmNTliMjUyZTAzNDQyNThkMjFiMGM2OTc3YzBhYTkuYmluZFBvcHVwKHBvcHVwX2Y5YjM0MzNkZmVmYjQ0MTBhOGVjNWIzYTVhNzQ3MzU5KTsKCiAgICAgICAgICAgIAogICAgICAgIAo8L3NjcmlwdD4= onload=\"this.contentDocument.open();this.contentDocument.write(atob(this.getAttribute('data-html')));this.contentDocument.close();\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>"
      ],
      "text/plain": [
       "<folium.folium.Map at 0x7f560456a438>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "map_toronto = folium.Map(location=[43.651070,-79.347015],zoom_start=10)\n",
    "\n",
    "for lat,lng,borough,neighbourhood in zip(df4['Latitude'],df4['Longitude'],df4['Borough'],df4['Neighborhood']):\n",
    "    label = '{}, {}'.format(neighbourhood, borough)\n",
    "    label = folium.Popup(label, parse_html=True)\n",
    "    folium.CircleMarker(\n",
    "    [lat,lng],\n",
    "    radius=5,\n",
    "    popup=label,\n",
    "    color='blue',\n",
    "    fill=True,\n",
    "    fill_color='#3186cc',\n",
    "    fill_opacity=0.7,\n",
    "    parse_html=False).add_to(map_toronto)\n",
    "map_toronto"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# This Map might not be visible on GitHub. Please check the README for this map. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Clustering the neighborhoods with k-means"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Cluster Labels</th>\n",
       "      <th>Postcode</th>\n",
       "      <th>Borough</th>\n",
       "      <th>Neighborhood</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>M5A</td>\n",
       "      <td>Downtown Toronto</td>\n",
       "      <td>Regent Park / Harbourfront</td>\n",
       "      <td>43.654260</td>\n",
       "      <td>-79.360636</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>M7A</td>\n",
       "      <td>Downtown Toronto</td>\n",
       "      <td>Queen's Park / Ontario Provincial Government</td>\n",
       "      <td>43.662301</td>\n",
       "      <td>-79.389494</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0</td>\n",
       "      <td>M5B</td>\n",
       "      <td>Downtown Toronto</td>\n",
       "      <td>Garden District, Ryerson</td>\n",
       "      <td>43.657162</td>\n",
       "      <td>-79.378937</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>0</td>\n",
       "      <td>M5C</td>\n",
       "      <td>Downtown Toronto</td>\n",
       "      <td>St. James Town</td>\n",
       "      <td>43.651494</td>\n",
       "      <td>-79.375418</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>4</td>\n",
       "      <td>M4E</td>\n",
       "      <td>East Toronto</td>\n",
       "      <td>The Beaches</td>\n",
       "      <td>43.676357</td>\n",
       "      <td>-79.293031</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Cluster Labels Postcode           Borough  \\\n",
       "2                0      M5A  Downtown Toronto   \n",
       "4                0      M7A  Downtown Toronto   \n",
       "9                0      M5B  Downtown Toronto   \n",
       "15               0      M5C  Downtown Toronto   \n",
       "19               4      M4E      East Toronto   \n",
       "\n",
       "                                    Neighborhood   Latitude  Longitude  \n",
       "2                     Regent Park / Harbourfront  43.654260 -79.360636  \n",
       "4   Queen's Park / Ontario Provincial Government  43.662301 -79.389494  \n",
       "9                       Garden District, Ryerson  43.657162 -79.378937  \n",
       "15                                St. James Town  43.651494 -79.375418  \n",
       "19                                   The Beaches  43.676357 -79.293031  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Documentation for reviewer: With this code I use k=5 to find Cluster Labels for each neighborhood in Toronto. \n",
    "k=5\n",
    "toronto_clustering = df4.drop(['Postcode','Borough','Neighborhood'],1)\n",
    "kmeans = KMeans(n_clusters = k,random_state=0).fit(toronto_clustering)\n",
    "kmeans.labels_\n",
    "df4.insert(0, 'Cluster Labels', kmeans.labels_)\n",
    "df4.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Visualize neighborhood clusters in Toronto "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><iframe src=\"about:blank\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" data-html= onload=\"this.contentDocument.open();this.contentDocument.write(atob(this.getAttribute('data-html')));this.contentDocument.close();\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>"
      ],
      "text/plain": [
       "<folium.folium.Map at 0x7f5604454f28>"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create map\n",
    "map_clusters = folium.Map(location=[43.651070,-79.347015],zoom_start=10)\n",
    "\n",
    "# set color scheme for the clusters\n",
    "x = np.arange(k)\n",
    "ys = [i + x + (i*x)**2 for i in range(k)]\n",
    "colors_array = cm.rainbow(np.linspace(0, 1, len(ys)))\n",
    "rainbow = [colors.rgb2hex(i) for i in colors_array]\n",
    "\n",
    "# add markers to the map\n",
    "markers_colors = []\n",
    "for lat, lon, neighbourhood, cluster in zip(df4['Latitude'], df4['Longitude'], df4['Neighborhood'], df4['Cluster Labels']):\n",
    "    label = folium.Popup(' Cluster ' + str(cluster), parse_html=True)\n",
    "    folium.CircleMarker(\n",
    "        [lat, lon],\n",
    "        radius=5,\n",
    "        popup=label,\n",
    "        color=rainbow[cluster-1],\n",
    "        fill=True,\n",
    "        fill_color=rainbow[cluster-1],\n",
    "        fill_opacity=0.7).add_to(map_clusters)\n",
    "       \n",
    "map_clusters"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# This Map might not be visible on GitHub. Please check the README for this map. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python",
   "language": "python",
   "name": "conda-env-python-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.10"
  },
  "widgets": {
   "state": {},
   "version": "1.1.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
